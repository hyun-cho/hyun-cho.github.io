{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part4/양방향과 OneToMany","result":{"data":{"markdownRemark":{"id":"d6bd4db8-1071-531e-ae6c-ba1eaa98566d","html":"<h1 id=\"양방향과-onetomany\" style=\"position:relative;\"><a href=\"#%EC%96%91%EB%B0%A9%ED%96%A5%EA%B3%BC-onetomany\" aria-label=\"양방향과 onetomany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>양방향과 @OneToMany</h1>\n<p>영화1 : 포스터M 관계에 있어서<br>\n포스터는 FK로 영화의 PK를 참조한다.<br>\n양방향 참조의 경우 항상 하나의 객체쪽에서 필요한 요구사항이다.  </p>\n<ul>\n<li>여기서 양방향 참조가 일어나게 되면 영화를 조회활 때 포스터들을 같이 조회할 수 있을 것이다.</li>\n</ul>\n<p>데이터베이스 관점에서는 항상 FK를 가지는 포스터가 관계를 가지지만, 객체지향적 해석으로 접근한다면 PK를 가지는 쪽이 관계를 정의할 이유가 될 수도 있습니다.  </p>\n<h2 id=\"중간정리\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EA%B0%84%EC%A0%95%EB%A6%AC\" aria-label=\"중간정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중간정리</h2>\n<ul>\n<li>데이터베이스상에는 PK/FK를 이용한 단방향 밖에 업다.</li>\n<li>객체지쟣ㅇ에서 필요에 의해 데이터베이스와 반대방향으로 설계할 수 있다.</li>\n</ul>\n<p>DB 설계와 반대로 참조하게 되는 경우</p>\n<ul>\n<li>PK를 가진 영화 객체가 모든 포스터 객체를 관리하는 단방향 참좀</li>\n<li>영화는 포스터를 관리하고, 포스터는 영화에 대한 참조를 가지는 양방향 참조</li>\n</ul>\n<h2 id=\"onetomany\" style=\"position:relative;\"><a href=\"#onetomany\" aria-label=\"onetomany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@OneToMany</h2>\n<p>@OneToMany 어노테이션은 영화와 포스터의 1:N의 관계로 지정하기 위해서 사용한다.<br>\n1인 영화쪽에서 N인 포스터에 대한 참조를 표현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Movie</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseEntity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> fetchType<span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Poster</span><span class=\"token punctuation\">></span></span> poster <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>fetchType은 기본적으로 LAZY긴 하지만 명시적으로 처리해 준다.  </p>\n<p>@OneToMany를 위와같이 쓰는 이유는 기본적으로 M:N의 관계를 구성하기 위해서 사용하기 때문<br>\n@OneToMany의 경우 @JoinTable 등을 이용해 별도의 테이블을 지정하거나 mappedBy 속성을 이용해서 하위 엔티티를 이용하는 설정을 추가할 수도 있다.</p>\n<h2 id=\"mappedby-속성\" style=\"position:relative;\"><a href=\"#mappedby-%EC%86%8D%EC%84%B1\" aria-label=\"mappedby 속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mappedBy 속성</h2>\n<p>mappedBy 속성을 이용해서 실제 데이터베이스에서 자신은 연관관계의 주인(owner)가 아니라는 것을 명시(FK를 가지고 있지 않고, 내 쪽이 PK다.)</p>","fields":{"slug":"/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part4/양방향과 OneToMany","tagSlugs":["/tag/코드로-배우는-스프링부트/","/tag/spring/","/tag/spring-boot/","/tag/spring-data-jpa/"]},"frontmatter":{"date":"2021-01-27T00:43:41.804Z","description":"코드로 배우는 스프링부트 양방향과 OneToMany","tags":["코드로-배우는-스프링부트","Spring","Spring Boot","Spring Data JPA"],"title":"양방향과 OneToMany","socialImage":null}}},"pageContext":{"slug":"/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part4/양방향과 OneToMany"}},"staticQueryHashes":["251939775","401334301","825871152"]}