{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL/Spring Boot/JPA와 MyBatis","result":{"data":{"markdownRemark":{"id":"e92dd2a0-a73a-5084-88ae-b9513d49069c","html":"<h1 id=\"jpa와-mybatis\" style=\"position:relative;\"><a href=\"#jpa%EC%99%80-mybatis\" aria-label=\"jpa와 mybatis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA와 MyBatis</h1>\n<h2 id=\"영속성-persistence\" style=\"position:relative;\"><a href=\"#%EC%98%81%EC%86%8D%EC%84%B1-persistence\" aria-label=\"영속성 persistence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>영속성 (Persistence)</h2>\n<p>JDBC를 이해하기 위해서는 영속성이라는 개념을 먼저 이해해야 한다.  </p>\n<p>영속성이란</p>\n<ul>\n<li>데이터를 생성한 프로그램이 종료되더라도 사라지지 않는 데이터의 특성</li>\n<li>영속성을 갖지 않는 데이터는 메모리에만 존재하기 때문에 프로그램을 종료하면 휘발된다.</li>\n<li>파일 시스템, 관계형 데이터베이스 혹은 객체 데이터베이스 등을 활용해 데이터를 영구하게 저장해 영속성을 부여</li>\n</ul>\n<p>영속성 계층(Persistence Layer)</p>\n<ul>\n<li>프로그램의 아키텍처에서 데이터에 영속성을 부여해주는 계층</li>\n<li>JDBC를 이용해 직접 구현이 가능하지만, Persistence framework를 이용한 개발이 많이 이루어짐</li>\n</ul>\n<p><img src=\"https://gmlwjd9405.github.io/images/spring-framework/spring-jdbc-layer.png\" alt=\"영속성 계층\"></p>\n<ul>\n<li>프레젠테이션 계층 (Presentation Layer) - UI 계층(UI layer)</li>\n<li>애플리케이션 계층 (Application Layer) - 서비스 계층(Service layer)</li>\n<li>비즈니스 논리 계층 (Business logic Layer) - 도메인 계층(Domain layer)</li>\n<li>데이터 접근 계층 (Data access Layer) - <strong>영속 계층(Persistence Layer)</strong></li>\n</ul>\n<p>Persistence Framework</p>\n<ul>\n<li>간단한 작업만으로 DB와 연동되는 시스템을 개발 가능</li>\n<li>\n<p>SQL Mapper와 ORM 으로 구분 가능</p>\n<ul>\n<li>JPA, Hibernate, Mybatis 등</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"sql-mapperdhk-orm\" style=\"position:relative;\"><a href=\"#sql-mapperdhk-orm\" aria-label=\"sql mapperdhk orm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL Mapperdhk ORM</h2>\n<p>ORM은 데이터베이스 객체를 자바 객체로 매핑함으로써 객체간의 관계를 바탕으로 SQL을 자동생성 해주지만 SQL Mapper는 SQL을 명시<br>\nORM은 관계형 데이터베이스의 관계를 Object에 반영하자는 것이 목적이라면, SQL Mapper는 단순히 필드를 매핑시키는 것이 목적  </p>\n<h3 id=\"sql-mapper\" style=\"position:relative;\"><a href=\"#sql-mapper\" aria-label=\"sql mapper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL Mapper</h3>\n<p>SQL &#x3C;—매핑—> Object 필드\nSQL Mapper는 SQL 문장으로 직접 데이터베이스 데이터를 다룸</p>\n<ul>\n<li>SQL Mapper는 SQL을 명시</li>\n<li>Ex) Mybatis, JdbcTemplates</li>\n</ul>\n<h3 id=\"ormobject-relational-mapping-객체-관계-매핑\" style=\"position:relative;\"><a href=\"#ormobject-relational-mapping-%EA%B0%9D%EC%B2%B4-%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91\" aria-label=\"ormobject relational mapping 객체 관계 매핑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ORM(Object-Relational Mapping), 객체-관계 매핑</h3>\n<p>데이터베이스 데이터 &#x3C;—매핑—> Object 필드</p>\n<ul>\n<li>객체를 통해 간접적으로 데이터베이스 데이터를 다룸</li>\n</ul>\n<p>객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결) 해주는 것을 말한다.</p>\n<ul>\n<li>ORM을 이요하면 SQL Query가 아닌 직관적인 코드(메서드)로 데이터를 조작가능</li>\n<li>객체 간의 관계를 바탕으로 SQL을 자동으로 생성 가능</li>\n</ul>\n<p>Persistence API</p>\n<ul>\n<li>JPA, Hibernate</li>\n</ul>\n<hr>\n<h2 id=\"jpajava-persistent-api\" style=\"position:relative;\"><a href=\"#jpajava-persistent-api\" aria-label=\"jpajava persistent api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA(Java Persistent API)</h2>\n<p>자바 ORM 기술에 대한 API 표준 명세</p>\n<ul>\n<li>JAVA SE, JAVA 플랫폼 EE를 사용하는 응용프로그램에서 RDB의 관리를 표현하는 자바 API</li>\n<li>JPA는 ORM을 사용하기 위한 표준 인터페이스를 모아둔 것</li>\n<li>기존 EJB에서 제공되던 엔티티 빈(Entity Bean)을 대체하는 기술</li>\n</ul>\n<p>JPA 구성요소 3가지</p>\n<ol>\n<li><code class=\"language-text\">javax.persistence</code> 에서 제공하는 모든 것</li>\n<li>JPQL (Java Persistence Query Language)</li>\n<li>객체/관계 메타데이터</li>\n</ol>\n<p>사용자가 원하는 JPA 구현체를 선택 가능</p>\n<ul>\n<li>JPA의 구현체로 Hibernate, EclipseLink, DataNucleus, OpenJPA, TopLink Essentials등이 존재</li>\n<li>이들을 ORM Framework라고 부름</li>\n</ul>\n<hr>\n<h2 id=\"hibernate\" style=\"position:relative;\"><a href=\"#hibernate\" aria-label=\"hibernate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hibernate</h2>\n<p>JPA의 구현체 중 하나<br>\nSQL을 직접 사용하지 않는다고 해서 JDBC API를 사용하지 않는다는 것은 아님  </p>\n<ul>\n<li>지원하는 메서드 내부에서는 JDBC API가 동작하고 있음, 단지 개발자가 SQL을 직접 작성하지 않을 뿐</li>\n</ul>\n<p>HQL(Hibernate Query Language) 라는 강력한 쿼리 언어 포함</p>\n<ul>\n<li>SQL과 비슷하며, 추가적인 컨벤션 정의 가능</li>\n<li>완전히 객체 지향적이며 이로써 상속, 다형성, 관계등의 객체지향 강점을 누릴 수 있다.</li>\n<li>자바 클래스와 프로퍼티의 이름을 제외하고는 대소문자 구분</li>\n<li>쿼리 결과로 객체를 반환하며 프로그래머에 의해 생성되고 직접적으로 접근 가능</li>\n<li>SQL에서는 지원하지 않는 pagenation, dynamic profiling 같은 향상된 기능 제공</li>\n<li>여러 테이블을 작업할 때 명시적인 join을 요구하지 않음</li>\n</ul>\n<p>장점</p>\n<ul>\n<li>객체지향적으로 데이터를 관리, 비즈니스 로직에 집중 가능, 객체지향적 개발 가능</li>\n<li>테이블 생성, 변경, 관리가 쉽다</li>\n<li>로직을 쿼리에 집중하기 보단 객체 자체에 집중 가능</li>\n<li>빠른 개발이 가능</li>\n</ul>\n<p>단점</p>\n<ul>\n<li>어렵다 (많은 내용이 감춰져있다.)</li>\n<li>잘 이해하고 쓰지 않으면 데이터 손실이 있을 수 있다. (persistence context)</li>\n<li>성능상 문제가 있을 수 있다.</li>\n</ul>\n<hr>\n<h2 id=\"mybatis\" style=\"position:relative;\"><a href=\"#mybatis\" aria-label=\"mybatis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mybatis</h2>\n<p>개발자가 지정한 SQL, 저장 프로시저 그리고 몇 가지 고급 매핑을 지원하는 SQL Mapper<br>\nJDBC로 처리하는 상당 부분의 코드와 파라미터 설정 및 결과 매핑을 대신해준다.</p>\n<ul>\n<li>기존에 JDBC를 사용할 때는 DB와 관련된 여러 복잡한 설정(Connection)등을 다루어야하나, SQL Mapper는 자바 객체를 실제 SQL문제 연결해, 빠른 개발과 편리한 테스트 환경을 얻음  </li>\n</ul>\n<p>데이터베이스 레코드에 원시 타입과 Map 인터페이스, 그리고 자바 POJO를 설정해 매핑하기 위해 xml과 Annotation 사용 가능<br>\nMyBatis는 원래 Apache Foundation의 iBatis였으나 생산성, 개발 프로세스, 커뮤니티 등의 이유로 Google Code로 이전되면서 이름이 바뀜  </p>\n<p>장점</p>\n<ul>\n<li>SQL에 대한 모든 컨트롤을 하고자 할 때 매우 적합</li>\n<li>SQL쿼리들이 매우 잘 최적화되어 있을 때 유용</li>\n</ul>\n<p>단점</p>\n<ul>\n<li>\n<p>어플리케이션과 데이터베이스 간의 설계에 대한 모든 조작을 하고자 할 때는 적합하지 않음</p>\n<ul>\n<li>서로 잘 구조화 되도록 많은 설정이 바뀌어야 하기 때문</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/posts/TIL/Spring Boot/JPA와 MyBatis","tagSlugs":["/tag/spring-data-jpa/","/tag/jdbc/","/tag/persitence-context/","/tag/hibernate/","/tag/my-batis/"]},"frontmatter":{"date":"2021-01-25T07:37:39.351Z","description":"JPA와 MyBatis의 개념 및 장단점 비교","tags":["Spring Data JPA","JDBC","Persitence Context","Hibernate","MyBatis"],"title":"JPA와 MyBatis","socialImage":null}}},"pageContext":{"slug":"/posts/TIL/Spring Boot/JPA와 MyBatis"}},"staticQueryHashes":["251939775","401334301","825871152"]}