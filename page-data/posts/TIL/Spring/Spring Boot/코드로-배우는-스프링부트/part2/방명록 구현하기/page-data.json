{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL/Spring/Spring Boot/코드로-배우는-스프링부트/part2/방명록 구현하기","result":{"data":{"markdownRemark":{"id":"1c5eb539-5711-5190-8ab9-d523456476a5","html":"<h1 id=\"프로젝트-구조-만들기\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"프로젝트 구조 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 구조 만들기</h1>\n<p>  프로젝트의 계층별 구조와 객체들</p>\n<ul>\n<li>Querydsl을 이용해 동적으로 검색 조건을 처리하는 방법</li>\n<li>Entity 객체와 DTO의 구분</li>\n<li>화면에서의 페이징 처리</li>\n</ul>\n<h2 id=\"프로젝트-구현-목록\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%ED%98%84-%EB%AA%A9%EB%A1%9D\" aria-label=\"프로젝트 구현 목록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 구현 목록</h2>\n<table>\n<thead>\n<tr>\n<th>기능</th>\n<th>URL</th>\n<th>GET/POST</th>\n<th>기능</th>\n<th>Redirect URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>목록</td>\n<td>/guestbook/list</td>\n<td>GET</td>\n<td>목록/페이징/검색</td>\n<td></td>\n</tr>\n<tr>\n<td>등록</td>\n<td>/guestbook/register</td>\n<td>GET</td>\n<td>입력 화면</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>/guestbook/register</td>\n<td>POST</td>\n<td>등록 처리</td>\n<td>/guestbook/list</td>\n</tr>\n<tr>\n<td>조회</td>\n<td>/guestbook/read</td>\n<td>GET</td>\n<td>조회화면</td>\n<td></td>\n</tr>\n<tr>\n<td>수정</td>\n<td>/guestbook/modify</td>\n<td>GET</td>\n<td>수정/삭제 가능 화면</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>/guestbook/modify</td>\n<td>POST</td>\n<td>수정 처리</td>\n<td>/guestbook/read</td>\n</tr>\n<tr>\n<td>삭제</td>\n<td>/guestbook/remote</td>\n<td>POST</td>\n<td>삭제 처리</td>\n<td>/guestbook/list</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"프로젝트-기본-구조\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"프로젝트 기본 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 기본 구조</h2>\n<blockquote>\n<p><strong>Thymeleaf Page</strong></p>\n<blockquote>\n<p><strong>Controller 계층</strong> : GuestbookController</p>\n<blockquote>\n<p><strong>Service 계층</strong> : GuestbookService Interface / GuestbookServiceImpl class</p>\n<blockquote>\n<p><strong>Repository 계층</strong> : GuestbookRepository\n</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li>브라우저의 Request는 GuestbookController에서 처리</li>\n<li>GuestbookController는 GuestbookService 타입을 주고받는 구조</li>\n<li>GuestbookRepository는 Spring Data JPA를 사용해 구성, GuestbookServiceImpl에 주입해 사용</li>\n<li>Thymeleaf를 이용해서 레이아웃 템플릿을 활용해 처리</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/77606318/105665914-6220bb00-5f1b-11eb-899d-60691a7283da.png\" alt=\"image\"></p>\n<ul>\n<li>브라우저에서 전달되는 Request는 GuestbookController에서 DTO의 형태로 처리</li>\n<li>Repository에서 엔티티 타입을 이용하므로 중간에 Service와 엔티티의 변환을 처리</li>\n</ul>\n<h3 id=\"엔티티-객체와-dto\" style=\"position:relative;\"><a href=\"#%EC%97%94%ED%8B%B0%ED%8B%B0-%EA%B0%9D%EC%B2%B4%EC%99%80-dto\" aria-label=\"엔티티 객체와 dto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엔티티 객체와 DTO</h3>\n<p>Thymeleaf - Controller - Service 계층 사이에서는 DTO로 전달<br>\nService - Repository 계층 사이에서는 엔티티 객체로 전달<br>\nService계층에서 DTO와 엔티티 객체 사이의 변환을 처리  </p>\n<h2 id=\"자동으로-처리되는-날짜시간-설정\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EC%B2%98%EB%A6%AC%EB%90%98%EB%8A%94-%EB%82%A0%EC%A7%9C%EC%8B%9C%EA%B0%84-%EC%84%A4%EC%A0%95\" aria-label=\"자동으로 처리되는 날짜시간 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동으로 처리되는 날짜/시간 설정</h2>\n<p>데이터의 등록 시간, 수정 시간과 같이 자동으로 추가되고 변경되는 칼럼이 존재<br>\n어노테이션을 활용하여 자동화  </p>\n<h3 id=\"mybatis와-jpa의-차이점\" style=\"position:relative;\"><a href=\"#mybatis%EC%99%80-jpa%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"mybatis와 jpa의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mybatis와 JPA의 차이점</h3>\n<p>JPA는 JPA 고유한 메모리 공간(<code class=\"language-text\">context</code>)을 이용해 엔티티 객체들을 관리<br>\n기존의 MyBatis 기반의 프로그램보다 한단계 추가<br>\nMyBatis의 경우 SQL을 위해 전달되는 객체는 모두 SQL처리가 끝난 후 상관이 없는 객체드<br>\nJPA에서의 엔티티 객체들은 영속 콘텍스트(Persistence Context) 라는 곳에서 관리하는 객체</p>\n<ul>\n<li>이 객체가 변경되면, 결과적으로 데이터베이스가 변경된다.</li>\n<li>JPA 엔티티 객체는 유지되며, 필요할 때 꺼내서 재사용하는 방식이다.</li>\n<li>엔티티 객체에는 어떤 변화가 일어나는 것을 감지하는 리스너(listener)가 있다.</li>\n</ul>\n<h2 id=\"동적-쿼리를-위한-querydsl-설정\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-querydsl-%EC%84%A4%EC%A0%95\" aria-label=\"동적 쿼리를 위한 querydsl 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 쿼리를 위한 Querydsl 설정</h2>\n<p>JPA 쿼리 메서드나 @Query는 선언할 때 고정된 형태의 값을 가진다는 단점<br>\n복합한 조건의 경우 동적으로 쿼리를 생성해서 처리하는 기능이 필요<br>\n이 때 쓰이는 기술이 <code class=\"language-text\">Querydsl</code>  </p>\n<ul>\n<li>작성된 엔티티 클래스를 그대로 사용하는 것이 아닌 <code class=\"language-text\">Q도메인</code> 이라는 것을 이용</li>\n<li>gradle setting을 완료하고 빌드하게 되면 build 폴더 내에 엔티티들을 Q도메인으로 자동 생성</li>\n</ul>\n<h3 id=\"querydsl-사용법\" style=\"position:relative;\"><a href=\"#querydsl-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"querydsl 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Querydsl 사용법</h3>\n<p>BooleanBuilder를 생성<br>\n조건에 맞는 구문은 Querydsl에서 사용하는 Predicate 타입의 함수를 생성<br>\nBooleanBuilder에 작성된 Predicate를 추가하고 실행  </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testQuery1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Pageable</span> pageable <span class=\"token operator\">=</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sort</span><span class=\"token punctuation\">.</span><span class=\"token function\">by</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gno\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">descending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">QGuestbook</span> qGuestbook <span class=\"token operator\">=</span> <span class=\"token class-name\">QGuestbook</span><span class=\"token punctuation\">.</span>guestbook<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n    <span class=\"token class-name\">String</span> keyword <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">BooleanBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BooleanBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span>\n\n    <span class=\"token class-name\">BooleanExpression</span> expression <span class=\"token operator\">=</span> qGuestbook<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3</span>\n\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//4</span>\n\n    <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Guestbook</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> guestbookRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">,</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>guestbook <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>guestbook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>Q도메인 클래스를 얻어옴</li>\n<li>BooleanBuilder는 where문에 들어가는 조건을 넣어주는 컨테이너</li>\n<li>\n<p>원하는 조건은 필드 값과 같이 결합해서 생성. BooleanBuilder 안에 들어가는 값은 com.querydsl.core.types.Predicate 타입이어야 한다.</p>\n<ul>\n<li>Java 안에 있는 Predicate가 아니다.</li>\n</ul>\n</li>\n<li>만들어진 조건은 where문에 and, or같은 키워드와 결합</li>\n<li>BooleanBuilder는 GuestbookRepository에 추가된 QuerydslPredicateExcutor 인터페이스의 findAll() 사용 가능</li>\n</ol>\n<h2 id=\"서비스-계층과-dtodata-transfer-object\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%B8%B5%EA%B3%BC-dtodata-transfer-object\" aria-label=\"서비스 계층과 dtodata transfer object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서비스 계층과 DTO(Data Transfer Object)</h2>\n<p>DTO는 엔티티 객체와 달리 각 계층끼리 주고받는 우편물이나 상자의 개념<br>\n데이터를 담고있다는 점에서 엔티티 객체와 유사<br>\n목적 자체가 데이터의 전달</p>\n<ul>\n<li>읽고, 쓰는 것이 모두 허용</li>\n<li>일회성으로 사용되는 성격이 강함  </li>\n</ul>\n<p>JPA를 사용하게 되면 엔티티는 실제 데이터 베이스와 관련이 있다.    </p>\n<ul>\n<li>내부적으로 entity manager가 관리하는 객체</li>\n<li>내부 생명주기가 있기 때문에 별도로 관리하는 것을 추천</li>\n</ul>\n<h3 id=\"dto\" style=\"position:relative;\"><a href=\"#dto\" aria-label=\"dto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DTO</h3>\n<p>DTO를 사용하게 되면 엔티티 객체의 범위를 한정 지을 수 있기 때문에 좀 더 안전한 코드를 작성가능<br>\n가장 큰 단점  </p>\n<ul>\n<li>엔티티와 유사한 코드를 중복으로 개발한다는 점</li>\n<li>엔티티 객체를 DTO로 변환하거나 반대 경우에 과정이 필요하다\n생성 된 DTO의 경우에 엔티티와 거의 동일한 필드를 가지고 Getter/Setter를 구현  </li>\n</ul>\n<h3 id=\"service\" style=\"position:relative;\"><a href=\"#service\" aria-label=\"service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service</h3>\n<p>service에서는 파라미터를 dto 타입으로 받기 때문에 이를 jpa로 변환처리 해야됨  </p>\n<ul>\n<li>DTO 클래스에 적용</li>\n<li>ModelMapper라이브러리 사용</li>\n<li>MapStruct 등이용</li>\n</ul>\n<h2 id=\"목록-처리\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EB%A1%9D-%EC%B2%98%EB%A6%AC\" aria-label=\"목록 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목록 처리</h2>\n<p>목록 처리를 위해 다음과 같은 상황 고려  </p>\n<ul>\n<li>화면에서 필요한 목록 데이터에 대한 DTO 생성</li>\n<li>DTO를 Pageable 타입으로 전환</li>\n<li><code class=\"language-text\">Page&lt;Entity&gt;</code>를 화면에서 사용하기 쉬운 DTO의 리스트 등으로 변환</li>\n<li>화면에 필요한 페이지 번호 처리</li>\n</ul>\n<p>목록 처리를 위한 DTO  </p>\n<ul>\n<li>\n<p>페이지 요청 처리 DTO (PageRequestDTO)</p>\n<ul>\n<li>목록 페이지를 요청할 때 사용하는 데이터를 재사용</li>\n<li>페이지 번호, 페이지 내 목록의 개수, 검색조건 등등</li>\n<li>이런 파라미터를 DTO로 선언하고 나중에 재사용</li>\n</ul>\n</li>\n<li>\n<p>페이지 결과 처리 DTO (PageResultDTO)</p>\n<ul>\n<li>JPA를 이용한 Repository에서는 페이지 처리 결과를 <code class=\"language-text\">Page&lt;Entity&gt;</code> 타입으로 반환</li>\n<li>서비스 계층에서 이를 처리하기 위해서 별도의 클래스를 만들어 처리</li>\n<li><code class=\"language-text\">Page&lt;Entity&gt;</code>의 엔티티 객체들을 DTO 객체로 변환해 자료구조로 담아주어야한다.</li>\n<li>화면 출력에 필요한 페이지 정보들을 구성 해야한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"목록-데이터-페이지-처리\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EB%A1%9D-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%B2%98%EB%A6%AC\" aria-label=\"목록 데이터 페이지 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목록 데이터 페이지 처리</h3>\n<p>PageResultDTO가 화면까지 전달되고, 이를 이앵효 페이지 처리를 하게 된다.<br>\nPageResultDTO의 구성은 다음과 같다.  </p>\n<ul>\n<li>화면에서 시작 페이지 번호 <code class=\"language-text\">start</code></li>\n<li>화면에서 끝 페이지 번호 <code class=\"language-text\">end</code></li>\n<li>이전/다음 이동 링크 여부 <code class=\"language-text\">prev, enxt</code></li>\n<li>현재 페이지 번호 <code class=\"language-text\">page</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 끝 번호 구하는 공식</span>\ntempEnd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>페이지번호 <span class=\"token operator\">/</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Math.ceil()은 소수점을 올림으로 처리하기 때문에 다음과 같은 상황이 가능  </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">tempEnd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token comment\">// = 10 1페이지;</span>\ntempEnd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span>   <span class=\"token comment\">// = 10 10페이지;</span>\ntempEnd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token comment\">// = 20 11페이지;</span></code></pre></div>\n<p>시작 페이지 번호는 끝 번호 - 9로 구한다.<br>\n끝 번호를 실제 마지막 페이지와 다시 비교.   </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">totalPage <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// result : Page&lt;GuestBook></span>\nend <span class=\"token operator\">=</span> totalPage <span class=\"token operator\">></span> tempEnd <span class=\"token operator\">?</span> tempEnd<span class=\"token operator\">:</span> totalPage<span class=\"token punctuation\">;</span></code></pre></div>\n<p>prev은 start > 1 이라면 존재<br>\nnext는 realEnd가 끝 번호(endPage) 보다 큰 경우만 존재 next = totalPage > tempEnd;  </p>\n<h2 id=\"화면-구성은-실습-예제-직접-해결해보기\" style=\"position:relative;\"><a href=\"#%ED%99%94%EB%A9%B4-%EA%B5%AC%EC%84%B1%EC%9D%80-%EC%8B%A4%EC%8A%B5-%EC%98%88%EC%A0%9C-%EC%A7%81%EC%A0%91-%ED%95%B4%EA%B2%B0%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"화면 구성은 실습 예제 직접 해결해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화면 구성은 실습 예제 직접 해결해보기</h2>\n<h2 id=\"검색-처리\" style=\"position:relative;\"><a href=\"#%EA%B2%80%EC%83%89-%EC%B2%98%EB%A6%AC\" aria-label=\"검색 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>검색 처리</h2>\n<p>서버 사이드 처리  </p>\n<ul>\n<li>PageRequestDTO에 검색 타입(type)과 키워드(keyword)를 추가</li>\n<li>이하 서비스 계층에서 Querydsl을 이요해서 검색 처리</li>\n</ul>\n<p>검색 항목은 크게 다음과 같이 정의  </p>\n<ul>\n<li>제목(t), 내용(c), 작성자(w)로 검색하는 경우</li>\n<li>제목 혹은 내용 으로 검색하는 경우</li>\n<li>제목 혹은 내용 혹은 작성자로 검색하는 경우만</li>\n</ul>\n<p>RequestDTO에 내용을 담아서 전달  </p>","fields":{"slug":"/posts/TIL/Spring/Spring Boot/코드로-배우는-스프링부트/part2/방명록 구현하기","tagSlugs":["/tag/코드로-배우는-스프링부트/","/tag/spring/","/tag/spring-boot/","/tag/maria-db/","/tag/thymeleaf/"]},"frontmatter":{"date":"2021-01-20T23:46:37.121Z","description":"코드로 배우는 스프링부트 part2/chapter4 방명록 구현하기","tags":["코드로-배우는-스프링부트","Spring","Spring Boot","MariaDB","Thymeleaf"],"title":"방명록 구현하기","socialImage":null}}},"pageContext":{"slug":"/posts/TIL/Spring/Spring Boot/코드로-배우는-스프링부트/part2/방명록 구현하기"}},"staticQueryHashes":["251939775","401334301","825871152"]}