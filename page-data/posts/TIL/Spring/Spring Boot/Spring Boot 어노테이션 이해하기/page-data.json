{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL/Spring/Spring Boot/Spring Boot 어노테이션 이해하기","result":{"data":{"markdownRemark":{"id":"c90694d7-f9ba-5511-b6b1-d2768c7b416e","html":"<h1 id=\"spring-boot-어노테이션annotatiion-이해하기\" style=\"position:relative;\"><a href=\"#spring-boot-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotatiion-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"spring boot 어노테이션annotatiion 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Boot 어노테이션(Annotatiion) 이해하기</h1>\n<p>본 장에서는 스프링에서 사용되는 다양한 어노테이션에 관련해서 정리한다.<br>\n배우는 족족 하나씩 추가하는 중이다.  </p>\n<h2 id=\"spring-boot-application\" style=\"position:relative;\"><a href=\"#spring-boot-application\" aria-label=\"spring boot application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Boot Application</h2>\n<h3 id=\"transactional\" style=\"position:relative;\"><a href=\"#transactional\" aria-label=\"transactional permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Transactional</code></strong></h3>\n<p>트랜잭션 처리를 지원하는 어노테이션<br>\n선언적 트랜잭션이라고 부른다.  </p>\n<p>클래스, 메서드 위에 @Transactional 이 추가되면, 이 클래스에 트랜잭션 기능이 적용된 프록시 객체가 생성된다.</p>\n<p>PlatformTransactionManager를 사용해서 트랜잭션을 시작하고, 정상 여부에 따라 Commit 또는 Rollback한다.</p>\n<h3 id=\"commit\" style=\"position:relative;\"><a href=\"#commit\" aria-label=\"commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Commit</code></strong></h3>\n<p>최종 결과를 커밋하기 위해서 사용. 이를 적용하지 않으면 테스트 코드의 deleteBy등의 구문은 자동적으로 Rollback 처리되어서 결과가 반연되지 않는다.</p>\n<h3 id=\"controller\" style=\"position:relative;\"><a href=\"#controller\" aria-label=\"controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Controller</code></strong></h3>\n<h3 id=\"restcontroller\" style=\"position:relative;\"><a href=\"#restcontroller\" aria-label=\"restcontroller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@RestController</code></strong></h3>\n<p>컨트롤러 접근 데이터가 오직 텍스트만 존재할 때 사용<br>\n모든 반환값을 JSON으로 처리하며 ResponseEntity&#x3C;> 객체를 사용  </p>\n<h3 id=\"getmapping\" style=\"position:relative;\"><a href=\"#getmapping\" aria-label=\"getmapping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@GetMapping</code></strong></h3>\n<p>컨트롤러 내부에서 Get Method를 처리한다.<br>\n파라미터로 변수를 받을 수 있는데, 이는 <code class=\"language-text\">@PathVariable</code>로 처리한다.</p>\n<h3 id=\"service\" style=\"position:relative;\"><a href=\"#service\" aria-label=\"service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Service</code></strong></h3>\n<p>스프링에서 빈으로 처리되도록 만들어 주는 어노테이션, Service 계층을 생성해준다.<br>\n서비스 구현체에 붙여 사용한다.</p>\n<h3 id=\"requiredargsconstructor\" style=\"position:relative;\"><a href=\"#requiredargsconstructor\" aria-label=\"requiredargsconstructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@RequiredArgsConstructor</code></strong></h3>\n<p>자바 빈을 자동으로 주입하기 위해서 사용하는 어노테이션</p>\n<hr>\n<h2 id=\"jpa\" style=\"position:relative;\"><a href=\"#jpa\" aria-label=\"jpa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA</h2>\n<h3 id=\"entity\" style=\"position:relative;\"><a href=\"#entity\" aria-label=\"entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Entity</code></strong></h3>\n<p>엔티티 클래스는 Spring Data JPA에서는 반드시 <strong>@Entity</strong> 를 추가해야한다.<br>\n해당 클래스가 엔티티를 위한 클래스이며, 해당 클래스의 인스턴스들을 JPA로 관리하는 엔티티 객체라는 것을 의미</p>\n<h3 id=\"table\" style=\"position:relative;\"><a href=\"#table\" aria-label=\"table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Table</code></strong></h3>\n<p>@Entity 어노테이션과 함께 하용하며, 데이터베이스상에서 엔티티 클래스를 어떠한 테이블로 생성할 것인지에 대한 정보를 담음</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"t_memo\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"id-와-generatedvalue\" style=\"position:relative;\"><a href=\"#id-%EC%99%80-generatedvalue\" aria-label=\"id 와 generatedvalue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Id</code></strong> 와 <strong><code class=\"language-text\">@GeneratedValue</code></strong></h3>\n<p>@Entity가 붙은 클래스는 PK에 해당하는 특정 필드를 @Id로 지정해야한다.<br>\n만약 해당 값을 지정해서 사용하는 경우가 아니면 GeneratedValue라는 어노테이션을 활용한다.</p>\n<p>키 생성 전략</p>\n<ul>\n<li>\n<p>GenerationType.AUTO(default)</p>\n<ul>\n<li>JPA 구현체 (Spring Boot:Hibernate)가 생성 방식을 결정</li>\n</ul>\n</li>\n<li>\n<p>GenerationType.IDENTITY : PK 자동생성 전략</p>\n<ul>\n<li>오라클 - 별도의 번호를 위한 별도의 테이블 생성</li>\n<li>MySQL, MariaDB - auto increment를 기본으로 사용해 레코드가 기록될 때마다 다른 번호를 가질 수 있도록 처리</li>\n</ul>\n</li>\n<li>\n<p>GenerationType.SEQUENCE</p>\n<ul>\n<li>데이터베이스의 sequence를 이요해서 키를 생성</li>\n<li>@SequenceGenerator 와 함께 사용</li>\n</ul>\n</li>\n<li>\n<p>GenerationType.TABLE</p>\n<ul>\n<li>키 생성 전용 테이블을 생성해서 키 생성</li>\n<li>@TableGenerator와 함께 사용</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"column\" style=\"position:relative;\"><a href=\"#column\" aria-label=\"column permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Column</code></strong></h3>\n<p>추가적인 필드(칼럼)이 필요할 경우 사용<br>\n다양한 속성을 지정가능</p>\n<ul>\n<li>nullable</li>\n<li>name</li>\n<li>length</li>\n<li>columnDefinition을 통해 기본값 지정 가능</li>\n</ul>\n<h3 id=\"query\" style=\"position:relative;\"><a href=\"#query\" aria-label=\"query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Query</code></strong></h3>\n<p>메서드의 이름과 상관없이 메서드에 추가한 어노테이션을 통해서 원하는 처리가 가능.<br>\nvalue는 JPQL(Java Persistence Query Language)로 작성하는데 객체지향 쿼리라고 불리는 구문들이다.  </p>\n<p>다음과 같은 작업 가능</p>\n<ul>\n<li>필요한 데이터만 선별적으로 추출하는 기능</li>\n<li>데이터베이스에 맞는 순수한 SQL(Native SQL)을 사용하는 기능</li>\n<li>DDL이 아닌 DML 등을 처리하는 기능(<code class=\"language-text\">@Modifying</code>과 함께 사용)</li>\n</ul>\n<h3 id=\"modifying\" style=\"position:relative;\"><a href=\"#modifying\" aria-label=\"modifying permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Modifying</code></strong></h3>\n<p>@Query 어노테이션에서 DML 을 처리할 때 같이 써야하는 어노테이션<br>\nupdate, delete 구문에는 항상 사용해야한다.</p>\n<h3 id=\"mappedsuperclass\" style=\"position:relative;\"><a href=\"#mappedsuperclass\" aria-label=\"mappedsuperclass permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@MappedSuperClass</code></strong></h3>\n<p>해당 어노테이션이 적용된 클래스는 테이블로 생성되지 않는다.</p>\n<h3 id=\"createddate과-lastmodifieddate\" style=\"position:relative;\"><a href=\"#createddate%EA%B3%BC-lastmodifieddate\" aria-label=\"createddate과 lastmodifieddate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@CreatedDate</code></strong>과 <strong><code class=\"language-text\">@LastModifiedDate</code></strong></h3>\n<p>JPA 내부에서 엔티티 객체가 생성/변경되는 것을 가지하는 역할은 AuditingEntityListener로 이루어진다.<br>\n해당 기능을 사용하기 위해 <code class=\"language-text\">@EnableJpaAuditing</code> 설정은 Application 클래스에 추가해 주어야 한다.<br>\n엔티티의 생성시간을 처리하고, 최종 수정 시간을 자동으로 처리하는 용도  </p>\n<ul>\n<li>속성으로 insertable, updatable 등 지정 가능  </li>\n</ul>\n<h3 id=\"manytoone\" style=\"position:relative;\"><a href=\"#manytoone\" aria-label=\"manytoone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>@<code class=\"language-text\">ManyToOne</code></strong></h3>\n<p>데이터베이스 구조로 한 테이블이 다른 테이블을 FK를 이요한 참조를 이용하게 되면 사용<br>\nJPA에서 FK쪽을 먼저 고려해 Many쪽에 사용  </p>\n<p>fetch 타입에는 (fetch = FetchType,~~)를 적용</p>\n<ul>\n<li>LAZY : 지연 로딩</li>\n<li>EAGAR : 즉시 로딩</li>\n</ul>\n<h3 id=\"onetomany\" style=\"position:relative;\"><a href=\"#onetomany\" aria-label=\"onetomany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@OneToMany</code></strong></h3>\n<p>@OneToMany 어노테이션은 영화와 포스터의 1:N의 관계로 지정하기 위해서 사용한다.<br>\n1인 영화쪽에서 N인 포스터에 대한 참조를 표현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Movie</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseEntity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> fetchType<span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Poster</span><span class=\"token punctuation\">></span></span> poster <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>fetchType은 기본적으로 LAZY긴 하지만 명시적으로 처리해 준다.  </p>\n<p>@OneToMany를 위와같이 쓰는 이유는 기본적으로 M:N의 관계를 구성하기 위해서 사용하기 때문<br>\n@OneToMany의 경우 @JoinTable 등을 이용해 별도의 테이블을 지정하거나 mappedBy 속성을 이용해서 하위 엔티티를 이용하는 설정을 추가할 수도 있다.  </p>\n<p>cascade 속성을 사용해서 현재 엔티티 객체의 상태를 하위 엔티티 객체들에게 전파 하고 처리할 수 있다.  </p>\n<ul>\n<li>ALL : 모든 상태 변화 전파</li>\n<li>PERSIST : 상위 엔티티 객체가 영속 컨텍스트에 저장되면 하위 엔티티들도 같이 저장</li>\n<li>MERGE : 현재 겍체와 영속 컨텍스트 내 객체와 병합되면 하위 엔티티들도 같이 반영</li>\n<li>REMOVE : 엔티티 객체 삭제 시점에 하위 엔티티들에 전파</li>\n<li>DETACT : 상위 엔티티가 영속 컨텍스트에 분리되면 하위 엔티티들도 같이 분리</li>\n</ul>\n<p>orphanRemoval 속성은 ‘함조가 없는 하위 엔티티 객체는 삭제할 것인가?‘에 대한 설정</p>\n<h3 id=\"entitygraph\" style=\"position:relative;\"><a href=\"#entitygraph\" aria-label=\"entitygraph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@EntityGraph</code></strong></h3>\n<p>@EntityGraph의 경우, 엔티티의 특정 속성을 같이 로딩하도록 표시하는 어노테이션<br>\nJPA를 이용할 경우, 연관관계의 FETCH 속성은 거의 LAZY로 하는게 일반적<br>\n@EntityGraph는 이러한 상황에서 특정 기능을 수행할 때만 EAGER로딩을 하도록 설정<br>\n다음과 같은 속성과 type을 가진다.  </p>\n<ul>\n<li><strong>attributePaths</strong> : 로딩 설정을 변경하고 싶은 속성의 이름을 배열로 명시</li>\n<li><strong>type</strong> : @EntityGraph를 어떤 방식으로 적용할 것인지 설정</li>\n<li>FATCH 속성값은 attributePaths에 명시한 속성은 EAGER로 처리하고, 나머지는 LAZY로 처리</li>\n<li>LOAD 속성값은 attributePaths에 명시한 속성은 EAGER로 처리하고, 나머지는 엔티티 클래스에 명시되거나 기본 방식으로 처리</li>\n</ul>\n<hr>\n<h2 id=\"lombok\" style=\"position:relative;\"><a href=\"#lombok\" aria-label=\"lombok permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lombok</h2>\n<p>롬복 어노테이션의 경우 싫어하는 사람이 많다..고 알고있지만 스프링부트를 처음 배우는 입장에서 이것 만큼 쉬운게 없다.</p>\n<h3 id=\"getter-setter\" style=\"position:relative;\"><a href=\"#getter-setter\" aria-label=\"getter setter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Getter, @Setter</code></strong></h3>\n<p>클래스 내부 변수의 Getter, Setter함수를 자동으로 생성해준다.</p>\n<h3 id=\"tostring\" style=\"position:relative;\"><a href=\"#tostring\" aria-label=\"tostring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@ToString()</code></strong></h3>\n<p>해당 객체의 toString() 메서드를 자동으로 생성  </p>\n<p>만약 해당 객체가 다른 객체(엔티티)를 참조하고 있는 경우 복잡한 쿼리문이 발생할 여지가 있다.<br>\n이를 방지하기 위해서 exclude 옵션을 사용한다.</p>\n<ul>\n<li>해당 속성값으로 지정된 변수는 toString()메서드에서 제외하기 때문</li>\n</ul>\n<h3 id=\"builder\" style=\"position:relative;\"><a href=\"#builder\" aria-label=\"builder permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Builder</code></strong></h3>\n<p>빌더패턴을 사용하여 클래스를 생성할 수 있게 도와준다.<br>\n@Builder 어노테이션을 사용하기 위해선 <code class=\"language-text\">@AllArgsConstructor</code>와 <code class=\"language-text\">@NoArgsConstructor</code>를 함께 사용해야한다.</p>\n<h3 id=\"log4j2\" style=\"position:relative;\"><a href=\"#log4j2\" aria-label=\"log4j2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Log4j2</code></strong></h3>\n<p>스프링 부트가 로그 라이블러ㅣ 중에 Log4j2를 기본으로 사용하기 때문에, 별도의 설정 없이 적용 가능</p>\n<h3 id=\"data\" style=\"position:relative;\"><a href=\"#data\" aria-label=\"data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><code class=\"language-text\">@Data</code></strong></h3>\n<p>Getter/Setter, toString(), equals(), hashCode()를 자동으로 생성하는 어노테이션</p>","fields":{"slug":"/posts/TIL/Spring/Spring Boot/Spring Boot 어노테이션 이해하기","tagSlugs":["/tag/spring-boot/","/tag/spring-data-jpa/","/tag/lombok/"]},"frontmatter":{"date":"2021-01-25T07:42:31.798Z","description":"다양한 Spring Boot의 어노테이션을 정리해보자","tags":["Spring Boot","Spring Data JPA","Lombok"],"title":"Spring Boot 어노테이션 이해하기","socialImage":null}}},"pageContext":{"slug":"/posts/TIL/Spring/Spring Boot/Spring Boot 어노테이션 이해하기"}},"staticQueryHashes":["251939775","401334301","825871152"]}