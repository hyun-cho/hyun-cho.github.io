{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/blog/코드로-배우는-스프링부트/part4/M:N 관계의 설계와 구현","result":{"data":{"markdownRemark":{"id":"3fbf62cf-4b3c-5a5d-82c9-2332f2557381","html":"<h1 id=\"chapter7-mn-관계의-설계와-구현\" style=\"position:relative;\"><a href=\"#chapter7-mn-%EA%B4%80%EA%B3%84%EC%9D%98-%EC%84%A4%EA%B3%84%EC%99%80-%EA%B5%AC%ED%98%84\" aria-label=\"chapter7 mn 관계의 설계와 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chapter7 M:N 관계의 설계와 구현</h1>\n<p>이번 장에서는 M:N (영화 : 리뷰) 관계에 대해서 구현</p>\n<ul>\n<li>학생과 수업</li>\n<li>상품과 상품 카테고리</li>\n<li>상품과 회원</li>\n</ul>\n<p>실제 테이블로 설계할 수가 없다. 고정된 개수의 칼럼을 가지고 있기 때문<br>\n데이터베이스는 정형화된 구조를 가지기 때문에, 수평적 확장은 불가  </p>\n<ul>\n<li>수평적 확장 : 컬럼 확장</li>\n<li>수직적 확장 : 레코드 증가 (row)</li>\n</ul>\n<p>이 문제를 해결하기 위해서 매핑(mapping) 테이블을 사용(연결테이블)  </p>\n<ul>\n<li>두 테이블에서 필요한 정보를 끌어서 쓰는 구조</li>\n<li>작성 이전에 다른 테이블들이 먼저 존재해야 한다.</li>\n<li>주로 ‘명사’가 아닌 ‘동사’나 ‘히스토리’에 대한 데이터를 보관하는 용도</li>\n<li>중간에서 양쪽의 PK를 참조하는 형태</li>\n</ul>\n<h2 id=\"jpa에서-mn-처리\" style=\"position:relative;\"><a href=\"#jpa%EC%97%90%EC%84%9C-mn-%EC%B2%98%EB%A6%AC\" aria-label=\"jpa에서 mn 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA에서 M:N 처리</h2>\n<p>크게 보면 두 가지  </p>\n<ul>\n<li><code class=\"language-text\">@ManyToMany</code> 를 이용해서 처리</li>\n<li>별도의 엔티티를 설계하고, <code class=\"language-text\">@ManyToOne</code>을 이용해서 처리하는 방식</li>\n</ul>\n<p><code class=\"language-text\">@ManyToMany</code>에서는 사실 몇 가지 문제가 존재</p>\n<ul>\n<li>장성하려는 예제에서 사용하기 힘듬(영화의 평점 등 정보는 리뷰에 종속되기 때문)</li>\n<li>양방향 참조를 이용하는데, 주의가 필요</li>\n<li>\n<p>JPA의 실행에서 중요한 현재 메모리상 엔티티 객체들의 상태와 데이터베이스의 상태를 동기화 시키는 것</p>\n<ul>\n<li>이러한 성질은 양방향 참조에서 유지하기는 간단하지 않다.</li>\n<li>실무에서도 최대한 ‘단방향 참조’를 위주로 프로젝트를 진행</li>\n</ul>\n</li>\n<li>본 프로젝트에서는 중간에 직접 매핑 테이블을 설계 + 직접 매핑 관계를 연결</li>\n</ul>\n<h2 id=\"예제-프로젝트-생성\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"예제 프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 프로젝트 생성</h2>\n<ul>\n<li>project 이름 : mreview</li>\n<li>gradle</li>\n<li>war 패키징</li>\n<li>Spring Boot DevTools</li>\n<li>Lombok</li>\n<li>Spring Web,</li>\n<li>Thymeleaf,</li>\n<li>Spring Data JPA</li>\n<li>mariadb 드라이버</li>\n<li>thymeleaf-extras 라이브러리 java8time</li>\n<li>application.properties에 데이터베이스, jpa, thymeleaf 설정</li>\n</ul>\n<h2 id=\"매핑-테이블을-위한-review-클래스-설계\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%ED%95%91-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EC%9C%84%ED%95%9C-review-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A4%EA%B3%84\" aria-label=\"매핑 테이블을 위한 review 클래스 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매핑 테이블을 위한 Review 클래스 설계</h2>\n<h2 id=\"uuid란\" style=\"position:relative;\"><a href=\"#uuid%EB%9E%80\" aria-label=\"uuid란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UUID?란</h2>\n<h2 id=\"영화-조회-화면에서-필요한-정보\" style=\"position:relative;\"><a href=\"#%EC%98%81%ED%99%94-%EC%A1%B0%ED%9A%8C-%ED%99%94%EB%A9%B4%EC%97%90%EC%84%9C-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\" aria-label=\"영화 조회 화면에서 필요한 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>영화 조회 화면에서 필요한 정보</h2>\n<p>목록 화면에서 영화의 제목과 이미지, 영화 리뷰의 평점/리뷰 개수를 출력<br>\n영화 조회 화면에서 영화와 영화의 이미지들, 리뷰의 평균점수/리뷰 개수를 같이 출력<br>\n리뷰에 대한 정보에는 회원의 이메일이나 닉네임(nickname)과 같은 정보를 같이 출력  </p>\n<h3 id=\"조회-쿼리-문제점\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%ED%9A%8C-%EC%BF%BC%EB%A6%AC-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"조회 쿼리 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조회 쿼리 문제점</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select m, max(mi), avg(coalesce(r.grade, 0)), count(distinct r) \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"from Movie m \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"left outer join MovieImage mi on mi.movie = m \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"left outer join Review r on r.movie = m \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"group by m\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>중간에 위와 같은 쿼리를 만들게 되는데, 위 코드를 실행하면 예상과 달리, 각 영화마다 이미지를 찾는 쿼리가 실행되 비효율적  </p>\n<p>중복되는 쿼리의 내용은, movie_image 테이블에서 해당하는 모든 영화의 이미지를 다 가져오는 쿼리  </p>\n<p>이 이유는 목록을 가져오는 쿼리는 문제가 없으나, max()를 이용하는 부분이 들어가며, 해당 영화의 모든 이미지를 가져오는 쿼리가 실행  </p>\n<ul>\n<li>이 문제는 (N+1 Problem)이라고 부름</li>\n<li>위 예시에서의 문제점은 이미지를 1개로 줄여서 처리하는 것으로 해결</li>\n</ul>\n<h3 id=\"n1-problem\" style=\"position:relative;\"><a href=\"#n1-problem\" aria-label=\"n1 problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>N+1 Problem?</h3>\n<p>1번의 쿼리로 N개의 데이터를 가져왔는데, N개의 데이터를 처리하기 위해서 필요한 추가 적인 쿼리가 N개에 대해서 수행되는 상황<br>\n1페이지에 해당하는 10개의 데이터를 가져오는 쿼리 1번과, 각 영화의 모든 이미지를 가져오기 위한 10번의 추가적인 쿼리가 실행<br>\n한 페이지마다 11번의 쿼리가 실행되기 때문에 성능에 커다란 문제  </p>\n<h3 id=\"testgetmoviereviews-에서의-문제점\" style=\"position:relative;\"><a href=\"#testgetmoviereviews-%EC%97%90%EC%84%9C%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"testgetmoviereviews 에서의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>testGetMovieReviews 에서의 문제점</h3>\n<p>Review 클래스의 Member에 대한 Fetch 방식이 LAZY이기 때문에 처리시마다 Member객체를 조회해야하는 문제<br>\n해결할 수 있는 방법 두가지  </p>\n<ul>\n<li>@Query 구문에 조인처리를 한다.</li>\n<li>@EntityGraph를 이용해서 Review 객체를 가져올 때 Member 객체를 로딩하는 방법</li>\n</ul>\n<p><code class=\"language-text\">@EntityGraph</code>의 경우, 엔티티의 특정 속성을 같이 로딩하도록 표시하는 어노테이션<br>\nJPA를 이용할 경우, 연관관계의 FETCH 속성은 거의 LAZY<br>\n@EntityGraph는 이러한 상황에서 특정 기능을 수행할 때만 EAGER로딩을 하도록 설정<br>\n다음과 같은 속성과 type을 가진다.  </p>\n<ul>\n<li><strong>attributePaths</strong> : 로딩 설정을 변경하고 싶은 속성의 이름을 배열로 명시</li>\n<li><strong>type</strong> : @EntityGraph를 어떤 방식으로 적용할 것인지 설정</li>\n<li>Fatch 속성값은 attributePaths에 명시한 속성은 EAGER로 처리하고, 나머지는 LAZY로 처리</li>\n<li>LOAD 속성값은 attributePaths에 명시한 속성은 EAGER로 처리하고, 나머지는 엔티티 클래스에 명시되거나 기본 방식으로 처리</li>\n</ul>","fields":{"slug":"/posts/blog/코드로-배우는-스프링부트/part4/M:N 관계의 설계와 구현","tagSlugs":["/tag/코드로-배우는-스프링부트/","/tag/spring/","/tag/spring-boot/","/tag/maria-db/","/tag/thymeleaf/"]},"frontmatter":{"date":"2021-01-20T23:46:37.121Z","description":"코드로 배우는 스프링부트 part4/chapter7 M:N 관계의 설계와 구현","tags":["코드로-배우는-스프링부트","Spring","Spring Boot","MariaDB","Thymeleaf"],"title":"M:N 관계의 설계와 구현","socialImage":null}}},"pageContext":{"slug":"/posts/blog/코드로-배우는-스프링부트/part4/M:N 관계의 설계와 구현"}},"staticQueryHashes":["251939775","401334301","825871152"]}