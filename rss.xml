<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by Hyun Cho]]></title><description><![CDATA[Well Done is better than Well Said]]></description><link>https://hyun-cho.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 31 Jan 2021 13:29:14 GMT</lastBuildDate><item><title><![CDATA[항공기 예약 프로젝트 기획]]></title><description><![CDATA[베이스 캠프 1주차 기획과제 회고록]]></description><link>https://hyun-cho.github.io/posts/회고록/항공기 예약 프로젝트 기획</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/회고록/항공기 예약 프로젝트 기획</guid><pubDate>Sun, 31 Jan 2021 12:11:23 GMT</pubDate><content:encoded>&lt;h2 id=&quot;nhn-베이스캠프-2주차-소감&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#nhn-%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%BA%A0%ED%94%84-2%EC%A3%BC%EC%B0%A8-%EC%86%8C%EA%B0%90&quot; aria-label=&quot;nhn 베이스캠프 2주차 소감 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;NHN 베이스캠프 2주차 소감&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;베이스 캠프 사전과제의 1주일이 끝나고 2주차 과제가 주어졌다. 프로젝트 요구사항이 주어지고 서비스를 기획해보며 느낀점을 적는다.&lt;/p&gt;
&lt;h2 id=&quot;요구사항을-분석하면서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%EC%9D%84-%EB%B6%84%EC%84%9D%ED%95%98%EB%A9%B4%EC%84%9C&quot; aria-label=&quot;요구사항을 분석하면서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;요구사항을 분석하면서&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;이번 캠프의 요구사항은 예매 서비스를 만드는 것이라고 한다.&lt;br&gt;
&lt;a href=&quot;https://forward.nhn.com&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;nhn forward&lt;/a&gt;에서 저번 기수에는 메일링 서비스를 만들었다 했는데 역시나 주제가 바뀌었다.&lt;br&gt;
결제를 제외한 서비스를 만드는 것인데 다른 서비스를 웹으로 개발해본 경험이 있기는 하지만 스프링을 써서 개발해본 적이 없어서 좋은 도전이 될 것같다.  &lt;/p&gt;
&lt;p&gt;사실 다른 요구사항 보다 개발적인 요구사항이 먼저 눈에 들어왔다.&lt;br&gt;
예매 서비스와, 회원 서비스를 나누어서 개발하라는 것인데 상상만해도 통합되어 있는것과 얼마나 차이가 날지 상상이 안된다.&lt;br&gt;
이것 또한 하나의 도전이 될 것 같다.  &lt;/p&gt;
&lt;h2 id=&quot;어쩔-수-없는-개발자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B4%EC%A9%94-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90&quot; aria-label=&quot;어쩔 수 없는 개발자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;어쩔 수 없는 개발자&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;팀원과 같은 주제를 두고 요구사항을 기반으로 화면 구성을 시작했다.&lt;br&gt;
먼저 필수 요구사항을 바탕으로 화면을 구성하고, 서로가 원하는 기능을 하나씩 추가하다보니 서비스가 꽤나 커진 것 같다.  &lt;/p&gt;
&lt;p&gt;이번 주는 개발사항을 전부 제외하고 기획부분만 하기로 정했는데 어쩔 수 없이 자꾸 개발적인 부분이 머리속에서 떠나가질 않았다.&lt;br&gt;
데이터베이스 설계부터, 화면에 들어갈 api통신들까지 나도 모르게 고려하면서 얘기하다보니 결과적으로 더 재밌는 기능들을 넣지 못해 아쉬운 생각이 든다.  &lt;/p&gt;
&lt;h2 id=&quot;앞으로의-개발일정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%9E%EC%9C%BC%EB%A1%9C%EC%9D%98-%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A0%95&quot; aria-label=&quot;앞으로의 개발일정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;앞으로의 개발일정&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;다음 주는 기획발표 이후 쭉 교육일정이 잡혀있다.&lt;br&gt;
무슨 교육을 할지 기대가 되지만 교육과 함께 개발할 사항들이 꽤 많은것 같아 다음 주부터는 아마 밤에도 일하고 있는 나를 보고 있지 않을까?  &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Javascript 문법정리_1]]></title><description><![CDATA[Javscript 문법 정리 1]]></description><link>https://hyun-cho.github.io/posts/TIL/Javascript/Javascript 문법정리_1</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/TIL/Javascript/Javascript 문법정리_1</guid><pubDate>Wed, 27 Jan 2021 02:30:44 GMT</pubDate><content:encoded>&lt;h1 id=&quot;javascript-문법-정리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#javascript-%EB%AC%B8%EB%B2%95-%EC%A0%95%EB%A6%AC&quot; aria-label=&quot;javascript 문법 정리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Javascript 문법 정리&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.yes24.com/Product/Goods/92742567&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;모던 자바스크립트 Deep Dive&lt;/a&gt;와 &lt;a href=&quot;https://developer.mozilla.org/ko/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;MDN&lt;/a&gt;를 보고 요약한 내용입니다.&lt;/p&gt;
&lt;p&gt;앞으로 사용한 Javascript 문법을 하나씩 정리해보자.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수&lt;/li&gt;
&lt;li&gt;표현식과 문&lt;/li&gt;
&lt;li&gt;데이터 타입&lt;/li&gt;
&lt;li&gt;연산자&lt;/li&gt;
&lt;li&gt;제어문&lt;/li&gt;
&lt;li&gt;타입 변화과 단축 평가&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;설명은 하나 이상의 언어에 대한 지식이 있다는 가정하에 설명한다.  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;chapter4-변수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter4-%EB%B3%80%EC%88%98&quot; aria-label=&quot;chapter4 변수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chapter4 변수&lt;/h1&gt;
&lt;h2 id=&quot;변수란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98%EB%9E%80&quot; aria-label=&quot;변수란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수란?&lt;/h2&gt;
&lt;p&gt;하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수명 : 변수의 이름&lt;/li&gt;
&lt;li&gt;할당 : 변수에 값을 저장&lt;/li&gt;
&lt;li&gt;참조 : 변수에 저장된 값을 읽어 들이는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;식별자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9D%EB%B3%84%EC%9E%90&quot; aria-label=&quot;식별자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;식별자&lt;/h2&gt;
&lt;p&gt;식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;값이 아니라 메모리 주소를 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;변수-선언&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8&quot; aria-label=&quot;변수 선언 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수 선언&lt;/h2&gt;
&lt;p&gt;변수 사용을 위해선 반드시 선언이 필요&lt;br&gt;
변수 선언을 위해서 var, let, const를 사용한다.&lt;br&gt;
선언된 공간에 값을 할당하지 않으면, 기본적으로 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;를 암묵적으로 할당한다.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; score&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;변수-호이스팅&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85&quot; aria-label=&quot;변수 호이스팅 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수 호이스팅&lt;/h2&gt;
&lt;p&gt;선언되지 않은 변수를 참조하게 되면 &lt;code class=&quot;language-text&quot;&gt;ReferenceError&lt;/code&gt;가 발생하는데, 아래 구문에서는 에러가 발생하지 않는다.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;score&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//undefined&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; score&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;//변수 선언&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 이유는 변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 시점, 런타임이 아닌 그 이전 단계에서 실행되기 때문&lt;br&gt;
위와 같은 자바스크립트 고유의 방식을 &lt;code class=&quot;language-text&quot;&gt;변수 호이스팅&lt;/code&gt; 이라고 한다.&lt;br&gt;
변수 선언 뿐만 아니라 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;function*&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;class&lt;/code&gt; 키워드 또한 변수 호이스팅이 일어나게 된다.&lt;/p&gt;
&lt;h2 id=&quot;값의-할당&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%92%EC%9D%98-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;값의 할당 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;값의 할당&lt;/h2&gt;
&lt;p&gt;할당에는 할당 연산자 &lt;code class=&quot;language-text&quot;&gt;=&lt;/code&gt;를 사용&lt;br&gt;
하나의 구문으로 보이지만 변수 선언 + 할당 2단계로 나누어져 실행된다.&lt;br&gt;
변수 선언은 호이스팅이 일어나 먼저 실행되고, 할당은 소스코드의 순서대로 실행된다.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; score &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;var 변수는 같은 메모리 공간에 대해서 재할당이 이루어지지 않는다.&lt;br&gt;
재할당의 경우 새로운 메모리 공간에 값을 할당하고 변수의 메모리 주소를 바꿔주는 방식으로 작동한다.&lt;br&gt;
버려진 메모리공간은 &lt;code class=&quot;language-text&quot;&gt;가비지 컬렉터&lt;/code&gt;에 의해서 관리 된다.  &lt;/p&gt;
&lt;p&gt;실질적인 재할당이 되지 않는 상수를 선언하기 위해서는 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;h2 id=&quot;식별자-네이밍-규칙&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9D%EB%B3%84%EC%9E%90-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EA%B7%9C%EC%B9%99&quot; aria-label=&quot;식별자 네이밍 규칙 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;식별자 네이밍 규칙&lt;/h2&gt;
&lt;p&gt;식별자 네이밍 규칙은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;식별자는 특수문자를 제외한 문자, 숫자, 언더바(_), 달러($)를 포함 할 수 있다.&lt;/li&gt;
&lt;li&gt;숫자로 시작할 수 없다.&lt;/li&gt;
&lt;li&gt;예약어는 사용 불가능 하다.&lt;/li&gt;
&lt;li&gt;대소문자를 구별한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;chapter5-표현식과-문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter5-%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC-%EB%AC%B8&quot; aria-label=&quot;chapter5 표현식과 문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chapter5 표현식과 문&lt;/h1&gt;
&lt;p&gt;값(value)은 표현식(expression)이 평가(evaluate)되어 생성된 결과  &lt;/p&gt;
&lt;h2 id=&quot;리터럴literal&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%ED%84%B0%EB%9F%B4literal&quot; aria-label=&quot;리터럴literal permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리터럴(Literal)&lt;/h2&gt;
&lt;p&gt;값을 이할 수 있는 무낮 또는 약속된 기호를 사용해 값을 생성하는 표기법&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;리터럴&lt;/th&gt;
&lt;th&gt;예시&lt;/th&gt;
&lt;th&gt;비고&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;정수&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;부동 소수점&lt;/td&gt;
&lt;td&gt;10.5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2진수&lt;/td&gt;
&lt;td&gt;0b01000001&lt;/td&gt;
&lt;td&gt;0b로 시작&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8진수&lt;/td&gt;
&lt;td&gt;0o101&lt;/td&gt;
&lt;td&gt;0o로 시작&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16진수&lt;/td&gt;
&lt;td&gt;0x41&lt;/td&gt;
&lt;td&gt;0x로 시작&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;문자열&lt;/td&gt;
&lt;td&gt;“Hello”, “World”&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;불리언&lt;/td&gt;
&lt;td&gt;true, false&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;객체&lt;/td&gt;
&lt;td&gt;{name: “kim”, address: “Seoul”}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;배열&lt;/td&gt;
&lt;td&gt;[1, 2, 3]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;함수&lt;/td&gt;
&lt;td&gt;function() {}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;정규 표현식&lt;/td&gt;
&lt;td&gt;[A-Z]+/g&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;표현식expression&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%91%9C%ED%98%84%EC%8B%9Dexpression&quot; aria-label=&quot;표현식expression permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;표현식(Expression)&lt;/h2&gt;
&lt;p&gt;표현식은 값으로 평가될 수 있는 statement다.&lt;br&gt;
또한 Value로 Evaluate될 수 있는 statement는 표현식&lt;/p&gt;
&lt;h2 id=&quot;문statement&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8statement&quot; aria-label=&quot;문statement permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문(Statement)&lt;/h2&gt;
&lt;p&gt;Javascript에서는 세미콜론을 자동 삽입해주는 기능이 있다.(Automatic semicolon insertion)&lt;br&gt;
세미콜론을 붙이는 것이 ESLint등의 정적 분석도구에서도 사용하며, 권장되는 방식이다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;chapter6-데이터-타입&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter6-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85&quot; aria-label=&quot;chapter6 데이터 타입 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chapter6 데이터 타입&lt;/h1&gt;
&lt;p&gt;ES6에서는 6개의 원시 데이터 타입(primitive type)과 객체 타입으로 분류한다.
| 구분      | 데이터타입      | 설명                                                |
| --------- | --------------- | --------------------------------------------------- |
| 원시타입  | 숫자(Number)    | 숫자, 정수와 실수 구분 없이 하나의 숫자 타입만 존재 |
|           | 문자열(String)  | 문자열                                              |
|           | 불리언(Boolean) | true, false                                         |
|           | undefined       | var 변수에 암묵적으로 할당                          |
|           | null            | 값이 없는 것을 의도적으로 명시                      |
|           | 심볼(Symbol)    | ES6 에서 추가된 7번째 타입                          |
| 객체 타입 |                 | 객체, 함수, 배열                                    |&lt;/p&gt;
&lt;h2 id=&quot;number&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#number&quot; aria-label=&quot;number permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Number&lt;/h2&gt;
&lt;p&gt;타 언어에 다양한 숫자 타입(int, float, double…)이 존재하는 것에 비해 자바스크립트는 단 하나의 숫자 타입만 존재&lt;br&gt;
Number 타입은 배정밀도 64비트 부동소수점 형식을 따른다.&lt;br&gt;
모든 수를 실수로 처리하며, 정수만 표현하기 위한 데이터 타입(integer type)이 별도로 존재하지 않는다.  &lt;/p&gt;
&lt;p&gt;Number 타입은 추가적으로 세 가지 특별한 값도 표현할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Infinity : 양의 무한대&lt;/li&gt;
&lt;li&gt;-Infinity : 음의 무한대&lt;/li&gt;
&lt;li&gt;NaN : 산술 연산 불가(not-a-number)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;string&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#string&quot; aria-label=&quot;string permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String&lt;/h2&gt;
&lt;p&gt;텍스트 데이터를 나타내는데 사용&lt;br&gt;
문자열은 0개 이상의 16비트 유니코드 문자(UTF-16)의 집합으로 전 세계 대부분의 문자를 표현할 수 있다.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 세가지 방식으로 텍스트를 감싼다. 일반적으로 &apos;&apos; 사용&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
string &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
string &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
string &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;template&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#template&quot; aria-label=&quot;template permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Template&lt;/h2&gt;
&lt;p&gt;`를 사용한 리터럴로, 멀티라인(multi-line), 표현식 삽입(expression-interpolation), 태그드(tagged) 템플릿 등 편리한 문자열 처리를 제공  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; template&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//multi-line&lt;/span&gt;
template &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello\nWorld&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
template &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello
World&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//expression-interpolation&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; first &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; last &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;world&apos;&lt;/span&gt;
template &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;My Name is &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; first &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; last&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//&apos;My Name is hello world&apos;&lt;/span&gt;
template &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;My Name is &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;first&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;last&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;My Name is hello world&apos;&lt;/span&gt;

template &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;1 + 2 = &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;1 + 2 = 3&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;boolean&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#boolean&quot; aria-label=&quot;boolean permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Boolean&lt;/h2&gt;
&lt;p&gt;참, 거짓을 나누는 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;를 가짐&lt;/p&gt;
&lt;h2 id=&quot;undefined&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#undefined&quot; aria-label=&quot;undefined permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;undefined&lt;/h2&gt;
&lt;p&gt;다른 언어에서는 할당되지 않는 값은 쓰레기 값으로 초기화 되는 것에 비해, javascript에서는 var 변수 선언에 의해 암묵적으로 할당된다.  &lt;/p&gt;
&lt;h2 id=&quot;null&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#null&quot; aria-label=&quot;null permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;null&lt;/h2&gt;
&lt;p&gt;위에서 만약 값이 없음을 명시적으로 알리고 싶을 때는 null을 사용한다&lt;/p&gt;
&lt;h2 id=&quot;symbol&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#symbol&quot; aria-label=&quot;symbol permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Symbol&lt;/h2&gt;
&lt;p&gt;변경 불가능한 원시 타입의 값&lt;br&gt;
다른 값과 중복되지 않는 유일무이한 값&lt;br&gt;
주로 이름이 충돌할 일이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용  &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Symbol&lt;/code&gt; 함수를 호출해 생성. 이때 생성된 Symbol값은 외부에 노출되지 않으며, 다른 값과 절대 중복되지 않는 유일한 값이다.&lt;/p&gt;
&lt;h2 id=&quot;필요성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%84%EC%9A%94%EC%84%B1&quot; aria-label=&quot;필요성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;필요성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해&lt;/li&gt;
&lt;li&gt;값을 참조할 때 한 번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해&lt;/li&gt;
&lt;li&gt;메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;동적-타이핑&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91&quot; aria-label=&quot;동적 타이핑 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동적 타이핑&lt;/h2&gt;
&lt;p&gt;정적 타입언어 : C, Java등&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수를 선언할 때 변수에 할당할 수 있는 값의 종류, 즉 데이터 타입을 사전에 선언해야 한다.&lt;/li&gt;
&lt;li&gt;명시적 타입 선언&lt;/li&gt;
&lt;li&gt;변수의 타입 변경 불가능하며, 선언한 타입에 맞는 값만 할당할 수 있다.&lt;/li&gt;
&lt;li&gt;컴파일 시점에 타입 체크&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;동적 타입언어 : python, javascript&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;키워드를 통해서 변수를 선언&lt;/li&gt;
&lt;li&gt;어떠한 데이터 값이라도 자유롭게 할당 가능&lt;/li&gt;
&lt;li&gt;typeof등의 연산자로 타입 조사&lt;/li&gt;
&lt;li&gt;값을 &lt;strong&gt;할당하는 시점에 변수의 타입이 동적으로 결정&lt;/strong&gt; 되며 자유롭게 변경&lt;/li&gt;
&lt;li&gt;유연성은 높지만 신뢰성은 떨어진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;변수를 사용할 때 유의사항&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수는 꼭 필요한 경우에 한해 제한적으로 사용.&lt;/li&gt;
&lt;li&gt;변수의 유효 범위(스코프)는 최대한 좁게 만들어 변수의 부작용을 억제해야 한다.&lt;/li&gt;
&lt;li&gt;전역변수는 최대한 사용하지 않도록 한다.&lt;/li&gt;
&lt;li&gt;변수보다는 상수를 사용해 값의 변경을 억제한다.&lt;/li&gt;
&lt;li&gt;변수 이름은 변수의 목적이나 의미를 파악할 수 있는 네이밍을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;chapter7-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter7-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;chapter7 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chapter7 연산자&lt;/h1&gt;
&lt;p&gt;연산자 : 하나 이상의 표현식을 대상으로 산술, 할당, 비교, 논리, 타입, 지수 연산 등을 수행해 하나의 값을 만든다.&lt;br&gt;
피연산자 : 연산자의 대상, 값으로 평가될 수 있는 표현식  &lt;/p&gt;
&lt;h2 id=&quot;산술-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;산술 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;산술 연산자&lt;/h2&gt;
&lt;p&gt;피연산자를 대상으로 수학적 계산을 수행. 산술연산이 불가능한 경우 NaN을 반환  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이항 산술 연산자
| 이항 산술 연산자 | 의미   | 부수효과 | 예시 |
| ---------------- | ------ | -------- | ---- |
| +                | 덧셈   | X        | 1+2  |
| -                | 뺄셈   | X        | 2-1  |
| *                | 곱셈   | X        | 1*2  |
| /                | 나눗셈 | X        | 5/2  |
| %                | 나머지 | X        | 5%2  |&lt;/li&gt;
&lt;li&gt;단항 산술 연산자
| 단항 산술 연산자 | 의미                                          | 부수효과 | 예시             |
| ---------------- | --------------------------------------------- | -------- | ---------------- |
| ++               | 증가                                          | O        | score++, ++score |
| —               | 감소                                          | O        | score—, —score |
| +                | 어떠한 효과도 없음                            | X        | +10              |
| +                | 양수를 음수로, 음수를 양수로 반전한 값을 반환 | X        | -(-10)           |&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다른 언어와 같이 &lt;code class=&quot;language-text&quot;&gt;++&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;--&lt;/code&gt;의 경우 위치에 따라서 연산 순서가 달라진다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;피연산자 앞에 위치 : 먼저 피연산자의 값을 증가/감소 시킨 후 다른 연산을 수행&lt;/li&gt;
&lt;li&gt;피연산자 뒤에 위치 : 다른 연산을 먼저 수행한 뒤 피연산자의 값을 증가/감소&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt;의 경우 피연산자 중 하나 이상이 문자열인 경우 문자열 연결로 자동 연산&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;의 경우도 자동 치환하여 계산한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이를 암묵저거 타입변환(implicit coercion) 또는 타입 강제변환(type coercion)이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 12&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//3&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NaN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;할당-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%A0%EB%8B%B9-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;할당 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;할당 연산자&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;우항에 있는 결과를 좌항에 있는 변수에 할당
| 할당 연산자 | 예     | 동일 표현 | 부수 효과 |
| ----------- | ------ | --------- | --------- |
| =           | x=5    | x=5       | O         |
| +=          | x += 5 | x = x + 5 | O         |
| -=          | x -= 5 | x = x - 5 | O         |
| *=          | x *= 5 | x = x * 5 | O         |
| /=          | x /= 5 | x = x / 5 | O         |
| %=          | x %= 5 | x = x % 5 | O         |&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;할당문 그 자체는 할당된 값으로 연산된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// c = 0 : 0으로 치환&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// b = 0 : 0으로 치환&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// a = 0 : 0으로 치환&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;비교-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;비교 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;비교 연산자&lt;/h2&gt;
&lt;p&gt;조건식에서 주로 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동등/일치 비교연산자
| 비교 연산자 | 의미        | 사례  | 설명                     | 부수효과 |
| ----------- | ----------- | ----- | ------------------------ | -------- |
| ==          | 동등 비교   | x==y  | x와 y의 값이 같음        | x        |
| ===         | 일치 비교   | x===y | x와 y의 값과 타입이 같음 | x        |
| !=          | 부동등 비교 | x!=y  | x와 y의 값이 다름        | x        |
| !==         | 부일치 비교 | x!==y | x와 y의 값과 타입이 다름 | x        |&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;==&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;===&lt;/code&gt;의 경우 같은지 여부하는 연산자지만 그 엄경도가 다르다.&lt;br&gt;
동등비교(==)의 경우 좌항과 우항의 피연산자를 비교할 때 먼저 암묵적 타입변환을 통해 타입을 일치시킨 후 같은 값인지 비교한다.&lt;br&gt;
일치비교(===)의 경우 좌항과 우항의 피연산자가 타입도 같고 값도 같은 경우에 한하여 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;를 반환한다.  &lt;/p&gt;
&lt;p&gt;동등비교의 경우 결과를 예측하기 어렵고, 십수하기 쉽기 때문에 사용하지 않는 편이 좋다.&lt;br&gt;
일치비교의 경우 NaN의 경우를 제외하면 타 언어의 동등 연산자와 같은 역할을 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Nan &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; Nan &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 문제점을 해결한 Object.is() 메서드가 ES6에서 도입되었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Obejct&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
Obejct&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;대소-관계-비교-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8C%80%EC%86%8C-%EA%B4%80%EA%B3%84-%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;대소 관계 비교 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;대소 관계 비교 연산자&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;대소 관계 비교 연산자&lt;/th&gt;
&lt;th&gt;예제&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;th&gt;부수 효과&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&gt;&lt;/td&gt;
&lt;td&gt;x &gt; y&lt;/td&gt;
&lt;td&gt;x가 y 보다 크다&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#x3C;&lt;/td&gt;
&lt;td&gt;x &gt; y&lt;/td&gt;
&lt;td&gt;x가 y 보다 작다&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&gt;=&lt;/td&gt;
&lt;td&gt;x &gt;= y&lt;/td&gt;
&lt;td&gt;x가 y 보다 크거나 같다&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&gt;=&lt;/td&gt;
&lt;td&gt;x &gt;= y&lt;/td&gt;
&lt;td&gt;x가 y 보다 작거나 같다&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;삼항-조건-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%BC%ED%95%AD-%EC%A1%B0%EA%B1%B4-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;삼항 조건 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;삼항 조건 연산자&lt;/h2&gt;
&lt;p&gt;조건식을 간단한 연산자를 통해 처리하는 방식이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;조건식 ? true일 때 반환 값 : false일 때 반환 값&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; score &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;pass&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fail&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;논리-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;논리 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;논리 연산자&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;논리 연산자&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;th&gt;부수 효과&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;||&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;논리합(OR)&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#x26;&amp;#x26;&lt;/td&gt;
&lt;td&gt;논리곱(AND)&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;부정(NOT)&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;논리 부정(!)의 경우, 후항에 대해서 암묵적인 타입 변환이 이루어진다.  &lt;/p&gt;
&lt;h2 id=&quot;쉼표-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%89%BC%ED%91%9C-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;쉼표 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;쉼표 연산자&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;,&lt;/code&gt;를 사용해서 왼쪽부터 차례대로 피연산자를 평가하고 마지막 피연산자의 평가가 끝나면 마지막 평가 결과를 반환  &lt;/p&gt;
&lt;h2 id=&quot;그룹-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%A3%B9-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;그룹 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그룹 연산자&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;()&lt;/code&gt;를 사용하여 피연산자를 감싸면, 그 표현식을 먼저 평가한다. 이를 통해 우선순위를 조절  &lt;/p&gt;
&lt;h2 id=&quot;typeof-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#typeof-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;typeof 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;typeof 연산자&lt;/h2&gt;
&lt;p&gt;피연산자의 타입을 문자열로 반환.&lt;br&gt;
‘string’, ‘number’, ‘boolean’, ‘undefined’, ‘symbol’, ‘object’, ‘function’의 타입으로 반환  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;의 경우에는 &lt;code class=&quot;language-text&quot;&gt;object&lt;/code&gt;타입으로 반환&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;지수-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A7%80%EC%88%98-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;지수 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;지수 연산자&lt;/h2&gt;
&lt;p&gt;ES6에서 추가된 지수 연산자는 (좌항)^(우항)의 결과를 반환&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 4       = Math.pow(2,2);&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 8       = Math.pow(2,3);&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0.25   = Math.pow(2,-2);&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// error&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;그-외의-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8-%EC%99%B8%EC%9D%98-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;그 외의 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그 외의 연산자&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;개요&lt;/th&gt;
&lt;th&gt;참고&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;?.&lt;/td&gt;
&lt;td&gt;옵셔널 체이닝 연산자&lt;/td&gt;
&lt;td&gt;9.4.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;??&lt;/td&gt;
&lt;td&gt;null 병합 연산자&lt;/td&gt;
&lt;td&gt;9.4.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;프로퍼티 삭제&lt;/td&gt;
&lt;td&gt;10.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;new&lt;/td&gt;
&lt;td&gt;생성자 함수를 호출할 때 사용해 인스턴스 생성&lt;/td&gt;
&lt;td&gt;17.2.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;instanceof&lt;/td&gt;
&lt;td&gt;좌변의 객체가 우변의 생성자 함수와 연결된 인스턴스인지&lt;/td&gt;
&lt;td&gt;19.1.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;프로퍼티 존재 확인&lt;/td&gt;
&lt;td&gt;19.13.1 in 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;연산자의-부수효과&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%B0%EC%82%B0%EC%9E%90%EC%9D%98-%EB%B6%80%EC%88%98%ED%9A%A8%EA%B3%BC&quot; aria-label=&quot;연산자의 부수효과 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;연산자의 부수효과&lt;/h2&gt;
&lt;p&gt;++, —, delete의 경우 부수효과가 생긴다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;++, —의 경우 값을 재할당하여 변경한다. 따라서 해당 변수를 사용하는데 영향을 준다.&lt;/li&gt;
&lt;li&gt;delete의 경우 객체의 property를 삭제하는 효과가 있기 때문에, 다른 코드에 영향을 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;연산자-우선순위&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%B0%EC%82%B0%EC%9E%90-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84&quot; aria-label=&quot;연산자 우선순위 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;연산자 우선순위&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;우선순위&lt;/th&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;new(매개변수 존재), &lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;[]&lt;/code&gt;(property 접근), &lt;code class=&quot;language-text&quot;&gt;()&lt;/code&gt;(함수 호출), &lt;code class=&quot;language-text&quot;&gt;?.&lt;/code&gt;(옵셔널 체이닝 연산자)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;new(매개변수 없음)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;x++, x—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;!x, +x, -x, ++x, —x, typeof, delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;*, /, %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;+, -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&amp;#x3C;, &amp;#x3C;=, &gt;, &gt;=, in, instanceof&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;==, !=, ===, !==&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;??&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&amp;#x26;&amp;#x26;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;||&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;? … : …&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;chapter8-제어문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter8-%EC%A0%9C%EC%96%B4%EB%AC%B8&quot; aria-label=&quot;chapter8 제어문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chapter8 제어문&lt;/h1&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;chapter9-타입-변환과-단축평가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter9-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98%EA%B3%BC-%EB%8B%A8%EC%B6%95%ED%8F%89%EA%B0%80&quot; aria-label=&quot;chapter9 타입 변환과 단축평가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chapter9 타입 변환과 단축평가&lt;/h1&gt;</content:encoded></item><item><title><![CDATA[Javascript개요]]></title><description><![CDATA[Javscript 개요]]></description><link>https://hyun-cho.github.io/posts/TIL/Javascript/Javascript개요</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/TIL/Javascript/Javascript개요</guid><pubDate>Wed, 27 Jan 2021 02:30:44 GMT</pubDate><content:encoded>&lt;h1 id=&quot;javascript의-표준화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#javascript%EC%9D%98-%ED%91%9C%EC%A4%80%ED%99%94&quot; aria-label=&quot;javascript의 표준화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Javascript의 표준화&lt;/h1&gt;
&lt;p&gt;크로스 브라우징 이슈(MS의 익스플로러..)로 인한 표준화된 언어의 개발이 필요해짐&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;버전&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;출시 연도&lt;/th&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ES1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1997&lt;/td&gt;
&lt;td&gt;초판&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1998&lt;/td&gt;
&lt;td&gt;ISO/IEC 16262 국제 표준과 동일한 규격 사용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1999&lt;/td&gt;
&lt;td&gt;정규 표현식, try… catch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2009&lt;/td&gt;
&lt;td&gt;HTML5와 함께 출현 JSON, strict mod, 접근자 프로퍼티, 어트리뷰트 제어, 향상된 배열 조작기능(forEach, map, filter, reduce, some, every&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES6(ECMAscript 2015)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2015&lt;/td&gt;
&lt;td&gt;let/const, 클래스, 화살표함수, 템플릿 리터럴, 디스트럭처링 할당, 스프레드 문법, rest 파라미터, 심벌, 프로미스, Map/Set, 이터러블, for…of, 제너레이터, Proxy, 모듈 import/export&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES7(ECMAscript 2016)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2016&lt;/td&gt;
&lt;td&gt;지수(**) 연산자, Array.prototype.includes, String.prototype.includes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES8(ECMAscript 2017)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2017&lt;/td&gt;
&lt;td&gt;async/await, Objeect 정적 메서드(Object.values, Obejct.entries, Object.getOwnPropertyDescriptors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES9(ECMAscript 2018)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2018&lt;/td&gt;
&lt;td&gt;Obejct rest/spread 프로퍼티, Promise.prototype.finally, async.generator, for await… of&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES10(ECMAscript 2019)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2019&lt;/td&gt;
&lt;td&gt;Objeect.fromEntries, Array.prototype.flat, Array.prototype.flatMap, optional catch binding&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES11(ECMAscript 2020)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2020&lt;/td&gt;
&lt;td&gt;String.prototype.matchAll, BigInt, globalThis, Promise.allSettled, null 병합 연산자, 옵셔널 체이닝 연산자, for … in enumertion order&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES12(ECMAscript 2021&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2021&lt;/td&gt;
&lt;td&gt;Optional Chaining(?.), Nulish coalescing operation(??), replaceAll, Private visibility modifier, WeakRefs, Finalizers, Promise.any&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;javascript의-역사&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#javascript%EC%9D%98-%EC%97%AD%EC%82%AC&quot; aria-label=&quot;javascript의 역사 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Javascript의 역사&lt;/h1&gt;
&lt;h2 id=&quot;ajax&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ajax&quot; aria-label=&quot;ajax permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ajax&lt;/h2&gt;
&lt;p&gt;JS와 비동기 방식으로 데이터를 교환할 수 있는 Ajax가 XMLHttpRequest라는 이름으로 등장했다.  &lt;/p&gt;
&lt;h2 id=&quot;jquery&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jquery&quot; aria-label=&quot;jquery permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;jQuery&lt;/h2&gt;
&lt;p&gt;DOM을 더욱 쉽게 제어할 수 있는 수단으로 나왔다.  쉽고 직관적인 jQuery를 더 선호하는 개발자가 양산되기도 했다.  &lt;/p&gt;
&lt;h2 id=&quot;v8-자바스크립트-엔진&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#v8-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%94%EC%A7%84&quot; aria-label=&quot;v8 자바스크립트 엔진 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;V8 자바스크립트 엔진&lt;/h2&gt;
&lt;p&gt;비동기 처리로 인한 더 성능 좋은 엔진이 필요해졌고, V8 엔진이 이를 대체했다, 과거 웹 서버에서 수행되던 로직들이 대거 클라이언트(브라우저)로 이동했고, 이는 웹 애플리케이션 개발에서 FE가 주목받게 되는 계기가 되었다.  &lt;/p&gt;
&lt;h2 id=&quot;nodejs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#nodejs&quot; aria-label=&quot;nodejs permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Node.js&lt;/h2&gt;
&lt;p&gt;2009년 V8 JS 엔진으로 빌드된 JS 런타임 환경이다.&lt;br&gt;
Node.js는 브라우저의 자바스크립트를 다른 환경에서도 동작할 수 있도록 자바스크립트 엔진을 브라우저에서 독립시킨 실행 환경.&lt;br&gt;
주로 서버사이드 애플리케이션 개발에 주로 사용된다.  &lt;/p&gt;
&lt;p&gt;비동기I/O를 지원하면 단일 스레드 이벤트 루프 기반으로 동작&lt;br&gt;
이로인해 요청(Request)처리 성능이 좋고 SPA처리에 적합하다.  &lt;/p&gt;
&lt;h2 id=&quot;spa-프레임워크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spa-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC&quot; aria-label=&quot;spa 프레임워크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SPA 프레임워크&lt;/h2&gt;
&lt;p&gt;데스크톱 어플리케이션과 비슷한 성능과 UX를 제공하는 것이 필수가 되었고, 이를 만족시키기 위한 CBD(Component Based Development) 방법론을 기반으로 하는 SPA(Single Page Application)이 대중화 되며 Angular, Vue.js, React, Svelte등 다양한 프레임워크/라이브러리가 많아졌다.&lt;/p&gt;
&lt;h2 id=&quot;javascript와-ecmascript&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#javascript%EC%99%80-ecmascript&quot; aria-label=&quot;javascript와 ecmascript permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Javascript와 ECMAScript&lt;/h2&gt;
&lt;p&gt;Javascript는 일반적으로 뼈대를 이루는 ECMAScript와 브라우저가 별도로 지원하는 클라이언트 사이드 Web API, 즉 DOM, BOM, Canvas, XMLHttpRequest, fetch, requestAnimationFrame, SVG, Web Storage, Web Component, Web Worker를 모두 포함하는 개념&lt;/p&gt;</content:encoded></item><item><title><![CDATA[양방향과 OneToMany]]></title><description><![CDATA[코드로 배우는 스프링부트 양방향과 OneToMany]]></description><link>https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part4/양방향과 OneToMany</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part4/양방향과 OneToMany</guid><pubDate>Wed, 27 Jan 2021 00:43:41 GMT</pubDate><content:encoded>&lt;h1 id=&quot;양방향과-onetomany&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%91%EB%B0%A9%ED%96%A5%EA%B3%BC-onetomany&quot; aria-label=&quot;양방향과 onetomany permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;양방향과 @OneToMany&lt;/h1&gt;
&lt;p&gt;영화1 : 포스터M 관계에 있어서&lt;br&gt;
포스터는 FK로 영화의 PK를 참조한다.&lt;br&gt;
양방향 참조의 경우 항상 하나의 객체쪽에서 필요한 요구사항이다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여기서 양방향 참조가 일어나게 되면 영화를 조회활 때 포스터들을 같이 조회할 수 있을 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;데이터베이스 관점에서는 항상 FK를 가지는 포스터가 관계를 가지지만, 객체지향적 해석으로 접근한다면 PK를 가지는 쪽이 관계를 정의할 이유가 될 수도 있습니다.  &lt;/p&gt;
&lt;h2 id=&quot;중간정리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A4%91%EA%B0%84%EC%A0%95%EB%A6%AC&quot; aria-label=&quot;중간정리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;중간정리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스상에는 PK/FK를 이용한 단방향 밖에 업다.&lt;/li&gt;
&lt;li&gt;객체지쟣ㅇ에서 필요에 의해 데이터베이스와 반대방향으로 설계할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DB 설계와 반대로 참조하게 되는 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PK를 가진 영화 객체가 모든 포스터 객체를 관리하는 단방향 참좀&lt;/li&gt;
&lt;li&gt;영화는 포스터를 관리하고, 포스터는 영화에 대한 참조를 가지는 양방향 참조&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;onetomany&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#onetomany&quot; aria-label=&quot;onetomany permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;@OneToMany&lt;/h2&gt;
&lt;p&gt;@OneToMany 어노테이션은 영화와 포스터의 1:N의 관계로 지정하기 위해서 사용한다.&lt;br&gt;
1인 영화쪽에서 N인 포스터에 대한 참조를 표현한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BaseEntity&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fetchType&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Poster&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; poster &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;fetchType은 기본적으로 LAZY긴 하지만 명시적으로 처리해 준다.  &lt;/p&gt;
&lt;p&gt;@OneToMany를 위와같이 쓰는 이유는 기본적으로 M:N의 관계를 구성하기 위해서 사용하기 때문&lt;br&gt;
@OneToMany의 경우 @JoinTable 등을 이용해 별도의 테이블을 지정하거나 mappedBy 속성을 이용해서 하위 엔티티를 이용하는 설정을 추가할 수도 있다.&lt;/p&gt;
&lt;h2 id=&quot;mappedby-속성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mappedby-%EC%86%8D%EC%84%B1&quot; aria-label=&quot;mappedby 속성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;mappedBy 속성&lt;/h2&gt;
&lt;p&gt;mappedBy 속성을 이용해서 실제 데이터베이스에서 자신은 연관관계의 주인(owner)가 아니라는 것을 명시(FK를 가지고 있지 않고, 내 쪽이 PK다.)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 어노테이션 이해하기]]></title><description><![CDATA[다양한 Spring Boot의 어노테이션을 정리해보자]]></description><link>https://hyun-cho.github.io/posts/TIL/Spring Boot/Spring Boot 어노테이션 이해하기</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/TIL/Spring Boot/Spring Boot 어노테이션 이해하기</guid><pubDate>Mon, 25 Jan 2021 07:42:31 GMT</pubDate><content:encoded>&lt;h1 id=&quot;spring-boot-어노테이션annotatiion-이해하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-boot-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotatiion-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0&quot; aria-label=&quot;spring boot 어노테이션annotatiion 이해하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spring Boot 어노테이션(Annotatiion) 이해하기&lt;/h1&gt;
&lt;p&gt;본 장에서는 스프링에서 사용되는 다양한 어노테이션에 관련해서 정리한다.&lt;br&gt;
배우는 족족 하나씩 추가하는 중이다.  &lt;/p&gt;
&lt;h2 id=&quot;spring-boot-application&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-boot-application&quot; aria-label=&quot;spring boot application permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spring Boot Application&lt;/h2&gt;
&lt;h3 id=&quot;transactional&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#transactional&quot; aria-label=&quot;transactional permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;트랜잭션 처리를 지원하는 어노테이션&lt;br&gt;
선언적 트랜잭션이라고 부른다.  &lt;/p&gt;
&lt;p&gt;클래스, 메서드 위에 @Transactional 이 추가되면, 이 클래스에 트랜잭션 기능이 적용된 프록시 객체가 생성된다.&lt;/p&gt;
&lt;p&gt;PlatformTransactionManager를 사용해서 트랜잭션을 시작하고, 정상 여부에 따라 Commit 또는 Rollback한다.&lt;/p&gt;
&lt;h3 id=&quot;commit&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#commit&quot; aria-label=&quot;commit permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Commit&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;최종 결과를 커밋하기 위해서 사용. 이를 적용하지 않으면 테스트 코드의 deleteBy등의 구문은 자동적으로 Rollback 처리되어서 결과가 반연되지 않는다.&lt;/p&gt;
&lt;h3 id=&quot;controller&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#controller&quot; aria-label=&quot;controller permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Controller&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&quot;restcontroller&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#restcontroller&quot; aria-label=&quot;restcontroller permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@RestController&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;컨트롤러 접근 데이터가 오직 텍스트만 존재할 때 사용&lt;br&gt;
모든 반환값을 JSON으로 처리하며 ResponseEntity&amp;#x3C;&gt; 객체를 사용  &lt;/p&gt;
&lt;h3 id=&quot;getmapping&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#getmapping&quot; aria-label=&quot;getmapping permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@GetMapping&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;컨트롤러 내부에서 Get Method를 처리한다.&lt;br&gt;
파라미터로 변수를 받을 수 있는데, 이는 &lt;code class=&quot;language-text&quot;&gt;@PathVariable&lt;/code&gt;로 처리한다.&lt;/p&gt;
&lt;h3 id=&quot;service&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#service&quot; aria-label=&quot;service permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Service&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;스프링에서 빈으로 처리되도록 만들어 주는 어노테이션, Service 계층을 생성해준다.&lt;br&gt;
서비스 구현체에 붙여 사용한다.&lt;/p&gt;
&lt;h3 id=&quot;requiredargsconstructor&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#requiredargsconstructor&quot; aria-label=&quot;requiredargsconstructor permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@RequiredArgsConstructor&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;자바 빈을 자동으로 주입하기 위해서 사용하는 어노테이션&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;jpa&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jpa&quot; aria-label=&quot;jpa permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JPA&lt;/h2&gt;
&lt;h3 id=&quot;entity&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#entity&quot; aria-label=&quot;entity permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Entity&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;엔티티 클래스는 Spring Data JPA에서는 반드시 &lt;strong&gt;@Entity&lt;/strong&gt; 를 추가해야한다.&lt;br&gt;
해당 클래스가 엔티티를 위한 클래스이며, 해당 클래스의 인스턴스들을 JPA로 관리하는 엔티티 객체라는 것을 의미&lt;/p&gt;
&lt;h3 id=&quot;table&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#table&quot; aria-label=&quot;table permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Table&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;@Entity 어노테이션과 함께 하용하며, 데이터베이스상에서 엔티티 클래스를 어떠한 테이블로 생성할 것인지에 대한 정보를 담음&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;t_memo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;id-와-generatedvalue&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#id-%EC%99%80-generatedvalue&quot; aria-label=&quot;id 와 generatedvalue permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Id&lt;/code&gt;&lt;/strong&gt; 와 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@GeneratedValue&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;@Entity가 붙은 클래스는 PK에 해당하는 특정 필드를 @Id로 지정해야한다.&lt;br&gt;
만약 해당 값을 지정해서 사용하는 경우가 아니면 GeneratedValue라는 어노테이션을 활용한다.&lt;/p&gt;
&lt;p&gt;키 생성 전략&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GenerationType.AUTO(default)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JPA 구현체 (Spring Boot:Hibernate)가 생성 방식을 결정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GenerationType.IDENTITY : PK 자동생성 전략&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;오라클 - 별도의 번호를 위한 별도의 테이블 생성&lt;/li&gt;
&lt;li&gt;MySQL, MariaDB - auto increment를 기본으로 사용해 레코드가 기록될 때마다 다른 번호를 가질 수 있도록 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GenerationType.SEQUENCE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스의 sequence를 이요해서 키를 생성&lt;/li&gt;
&lt;li&gt;@SequenceGenerator 와 함께 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GenerationType.TABLE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;키 생성 전용 테이블을 생성해서 키 생성&lt;/li&gt;
&lt;li&gt;@TableGenerator와 함께 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;column&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#column&quot; aria-label=&quot;column permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Column&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;추가적인 필드(칼럼)이 필요할 경우 사용&lt;br&gt;
다양한 속성을 지정가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nullable&lt;/li&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;length&lt;/li&gt;
&lt;li&gt;columnDefinition을 통해 기본값 지정 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;query&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#query&quot; aria-label=&quot;query permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Query&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;메서드의 이름과 상관없이 메서드에 추가한 어노테이션을 통해서 원하는 처리가 가능.&lt;br&gt;
value는 JPQL(Java Persistence Query Language)로 작성하는데 객체지향 쿼리라고 불리는 구문들이다.  &lt;/p&gt;
&lt;p&gt;다음과 같은 작업 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;필요한 데이터만 선별적으로 추출하는 기능&lt;/li&gt;
&lt;li&gt;데이터베이스에 맞는 순수한 SQL(Native SQL)을 사용하는 기능&lt;/li&gt;
&lt;li&gt;DDL이 아닌 DML 등을 처리하는 기능(&lt;code class=&quot;language-text&quot;&gt;@Modifying&lt;/code&gt;과 함께 사용)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;modifying&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#modifying&quot; aria-label=&quot;modifying permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Modifying&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;@Query 어노테이션에서 DML 을 처리할 때 같이 써야하는 어노테이션&lt;br&gt;
update, delete 구문에는 항상 사용해야한다.&lt;/p&gt;
&lt;h3 id=&quot;mappedsuperclass&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mappedsuperclass&quot; aria-label=&quot;mappedsuperclass permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@MappedSuperClass&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;해당 어노테이션이 적용된 클래스는 테이블로 생성되지 않는다.&lt;/p&gt;
&lt;h3 id=&quot;createddate과-lastmodifieddate&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#createddate%EA%B3%BC-lastmodifieddate&quot; aria-label=&quot;createddate과 lastmodifieddate permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@CreatedDate&lt;/code&gt;&lt;/strong&gt;과 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@LastModifiedDate&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;JPA 내부에서 엔티티 객체가 생성/변경되는 것을 가지하는 역할은 AuditingEntityListener로 이루어진다.&lt;br&gt;
해당 기능을 사용하기 위해 &lt;code class=&quot;language-text&quot;&gt;@EnableJpaAuditing&lt;/code&gt; 설정은 Application 클래스에 추가해 주어야 한다.&lt;br&gt;
엔티티의 생성시간을 처리하고, 최종 수정 시간을 자동으로 처리하는 용도  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;속성으로 insertable, updatable 등 지정 가능  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;manytoone&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#manytoone&quot; aria-label=&quot;manytoone permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;@&lt;code class=&quot;language-text&quot;&gt;ManyToOne&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;데이터베이스 구조로 한 테이블이 다른 테이블을 FK를 이요한 참조를 이용하게 되면 사용&lt;br&gt;
JPA에서 FK쪽을 먼저 고려해 Many쪽에 사용  &lt;/p&gt;
&lt;p&gt;fetch 타입에는 (fetch = FetchType,~~)를 적용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LAZY : 지연 로딩&lt;/li&gt;
&lt;li&gt;EAGAR : 즉시 로딩&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;onetomany&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#onetomany&quot; aria-label=&quot;onetomany permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@OneToMany&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;@OneToMany 어노테이션은 영화와 포스터의 1:N의 관계로 지정하기 위해서 사용한다.&lt;br&gt;
1인 영화쪽에서 N인 포스터에 대한 참조를 표현한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BaseEntity&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fetchType&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Poster&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; poster &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;fetchType은 기본적으로 LAZY긴 하지만 명시적으로 처리해 준다.  &lt;/p&gt;
&lt;p&gt;@OneToMany를 위와같이 쓰는 이유는 기본적으로 M:N의 관계를 구성하기 위해서 사용하기 때문&lt;br&gt;
@OneToMany의 경우 @JoinTable 등을 이용해 별도의 테이블을 지정하거나 mappedBy 속성을 이용해서 하위 엔티티를 이용하는 설정을 추가할 수도 있다.  &lt;/p&gt;
&lt;p&gt;cascade 속성을 사용해서 현재 엔티티 객체의 상태를 하위 엔티티 객체들에게 전파 하고 처리할 수 있다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ALL : 모든 상태 변화 전파&lt;/li&gt;
&lt;li&gt;PERSIST : 상위 엔티티 객체가 영속 컨텍스트에 저장되면 하위 엔티티들도 같이 저장&lt;/li&gt;
&lt;li&gt;MERGE : 현재 겍체와 영속 컨텍스트 내 객체와 병합되면 하위 엔티티들도 같이 반영&lt;/li&gt;
&lt;li&gt;REMOVE : 엔티티 객체 삭제 시점에 하위 엔티티들에 전파&lt;/li&gt;
&lt;li&gt;DETACT : 상위 엔티티가 영속 컨텍스트에 분리되면 하위 엔티티들도 같이 분리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;orphanRemoval 속성은 ‘함조가 없는 하위 엔티티 객체는 삭제할 것인가?‘에 대한 설정&lt;/p&gt;
&lt;h3 id=&quot;entitygraph&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#entitygraph&quot; aria-label=&quot;entitygraph permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@EntityGraph&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;@EntityGraph의 경우, 엔티티의 특정 속성을 같이 로딩하도록 표시하는 어노테이션&lt;br&gt;
JPA를 이용할 경우, 연관관계의 FETCH 속성은 거의 LAZY로 하는게 일반적&lt;br&gt;
@EntityGraph는 이러한 상황에서 특정 기능을 수행할 때만 EAGER로딩을 하도록 설정&lt;br&gt;
다음과 같은 속성과 type을 가진다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attributePaths&lt;/strong&gt; : 로딩 설정을 변경하고 싶은 속성의 이름을 배열로 명시&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; : @EntityGraph를 어떤 방식으로 적용할 것인지 설정&lt;/li&gt;
&lt;li&gt;FATCH 속성값은 attributePaths에 명시한 속성은 EAGER로 처리하고, 나머지는 LAZY로 처리&lt;/li&gt;
&lt;li&gt;LOAD 속성값은 attributePaths에 명시한 속성은 EAGER로 처리하고, 나머지는 엔티티 클래스에 명시되거나 기본 방식으로 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;lombok&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lombok&quot; aria-label=&quot;lombok permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lombok&lt;/h2&gt;
&lt;p&gt;롬복 어노테이션의 경우 싫어하는 사람이 많다..고 알고있지만 스프링부트를 처음 배우는 입장에서 이것 만큼 쉬운게 없다.&lt;/p&gt;
&lt;h3 id=&quot;getter-setter&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#getter-setter&quot; aria-label=&quot;getter setter permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Getter, @Setter&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;클래스 내부 변수의 Getter, Setter함수를 자동으로 생성해준다.&lt;/p&gt;
&lt;h3 id=&quot;tostring&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tostring&quot; aria-label=&quot;tostring permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@ToString()&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;해당 객체의 toString() 메서드를 자동으로 생성  &lt;/p&gt;
&lt;p&gt;만약 해당 객체가 다른 객체(엔티티)를 참조하고 있는 경우 복잡한 쿼리문이 발생할 여지가 있다.&lt;br&gt;
이를 방지하기 위해서 exclude 옵션을 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 속성값으로 지정된 변수는 toString()메서드에서 제외하기 때문&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;builder&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#builder&quot; aria-label=&quot;builder permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Builder&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;빌더패턴을 사용하여 클래스를 생성할 수 있게 도와준다.&lt;br&gt;
@Builder 어노테이션을 사용하기 위해선 &lt;code class=&quot;language-text&quot;&gt;@AllArgsConstructor&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;@NoArgsConstructor&lt;/code&gt;를 함께 사용해야한다.&lt;/p&gt;
&lt;h3 id=&quot;log4j2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#log4j2&quot; aria-label=&quot;log4j2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Log4j2&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;스프링 부트가 로그 라이블러ㅣ 중에 Log4j2를 기본으로 사용하기 때문에, 별도의 설정 없이 적용 가능&lt;/p&gt;
&lt;h3 id=&quot;data&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#data&quot; aria-label=&quot;data permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;@Data&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Getter/Setter, toString(), equals(), hashCode()를 자동으로 생성하는 어노테이션&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JPA test auto increment 문제]]></title><description><![CDATA[JPA test auto increment 문제 발생 및 해결 과정]]></description><link>https://hyun-cho.github.io/posts/blog/삽질/JPA test auto increment 문제</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/blog/삽질/JPA test auto increment 문제</guid><pubDate>Mon, 25 Jan 2021 07:39:38 GMT</pubDate><content:encoded>&lt;h1 id=&quot;jpa-test-auto-increment-문제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jpa-test-auto-increment-%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;jpa test auto increment 문제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JPA test auto increment 문제&lt;/h1&gt;
&lt;p&gt;Test를 만들 때 삽입 &gt; 조회 &gt; 삭제 까지의 하나의 테스트를 통합테스트로 만들고자 했을 때 중복된 레코드를 생성, 제거하게 되면 해당 테이블의 auto increment 속성때문에 에러가 나오기 시작했다.  &lt;/p&gt;
&lt;p&gt;다양한 해결 방법이 존재한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@Before, @After를 통한 트랜잭션 처리&lt;/li&gt;
&lt;li&gt;Entity Manager를 통한 시작 설정 초기화&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래 참고할 만한 글을 보고 어느정도 이해한 것 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/HomoEfficio/dev-tips/blob/master/Spring%20Data%20JPA%20%ED%85%8C%EC%8A%A4%ED%8A%B8%20%EC%8B%9C%20auto-increment%20%EB%AC%B8%EC%A0%9C.md&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/HomoEfficio/dev-tips/blob/master/Spring%20Data%20JPA%20%ED%85%8C%EC%8A%A4%ED%8A%B8%20%EC%8B%9C%20auto-increment%20%EB%AC%B8%EC%A0%9C.md&lt;/a&gt; 참조&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[JPA와 MyBatis]]></title><description><![CDATA[JPA와 MyBatis의 개념 및 장단점 비교]]></description><link>https://hyun-cho.github.io/posts/TIL/Spring Boot/JPA와 MyBatis</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/TIL/Spring Boot/JPA와 MyBatis</guid><pubDate>Mon, 25 Jan 2021 07:37:39 GMT</pubDate><content:encoded>&lt;h1 id=&quot;jpa와-mybatis&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jpa%EC%99%80-mybatis&quot; aria-label=&quot;jpa와 mybatis permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JPA와 MyBatis&lt;/h1&gt;
&lt;h2 id=&quot;영속성-persistence&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%81%EC%86%8D%EC%84%B1-persistence&quot; aria-label=&quot;영속성 persistence permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;영속성 (Persistence)&lt;/h2&gt;
&lt;p&gt;JDBC를 이해하기 위해서는 영속성이라는 개념을 먼저 이해해야 한다.  &lt;/p&gt;
&lt;p&gt;영속성이란&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 생성한 프로그램이 종료되더라도 사라지지 않는 데이터의 특성&lt;/li&gt;
&lt;li&gt;영속성을 갖지 않는 데이터는 메모리에만 존재하기 때문에 프로그램을 종료하면 휘발된다.&lt;/li&gt;
&lt;li&gt;파일 시스템, 관계형 데이터베이스 혹은 객체 데이터베이스 등을 활용해 데이터를 영구하게 저장해 영속성을 부여&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;영속성 계층(Persistence Layer)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램의 아키텍처에서 데이터에 영속성을 부여해주는 계층&lt;/li&gt;
&lt;li&gt;JDBC를 이용해 직접 구현이 가능하지만, Persistence framework를 이용한 개발이 많이 이루어짐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://gmlwjd9405.github.io/images/spring-framework/spring-jdbc-layer.png&quot; alt=&quot;영속성 계층&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프레젠테이션 계층 (Presentation Layer) - UI 계층(UI layer)&lt;/li&gt;
&lt;li&gt;애플리케이션 계층 (Application Layer) - 서비스 계층(Service layer)&lt;/li&gt;
&lt;li&gt;비즈니스 논리 계층 (Business logic Layer) - 도메인 계층(Domain layer)&lt;/li&gt;
&lt;li&gt;데이터 접근 계층 (Data access Layer) - &lt;strong&gt;영속 계층(Persistence Layer)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Persistence Framework&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;간단한 작업만으로 DB와 연동되는 시스템을 개발 가능&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL Mapper와 ORM 으로 구분 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JPA, Hibernate, Mybatis 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;sql-mapperdhk-orm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#sql-mapperdhk-orm&quot; aria-label=&quot;sql mapperdhk orm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQL Mapperdhk ORM&lt;/h2&gt;
&lt;p&gt;ORM은 데이터베이스 객체를 자바 객체로 매핑함으로써 객체간의 관계를 바탕으로 SQL을 자동생성 해주지만 SQL Mapper는 SQL을 명시&lt;br&gt;
ORM은 관계형 데이터베이스의 관계를 Object에 반영하자는 것이 목적이라면, SQL Mapper는 단순히 필드를 매핑시키는 것이 목적  &lt;/p&gt;
&lt;h3 id=&quot;sql-mapper&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#sql-mapper&quot; aria-label=&quot;sql mapper permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQL Mapper&lt;/h3&gt;
&lt;p&gt;SQL &amp;#x3C;—매핑—&gt; Object 필드
SQL Mapper는 SQL 문장으로 직접 데이터베이스 데이터를 다룸&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL Mapper는 SQL을 명시&lt;/li&gt;
&lt;li&gt;Ex) Mybatis, JdbcTemplates&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ormobject-relational-mapping-객체-관계-매핑&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ormobject-relational-mapping-%EA%B0%9D%EC%B2%B4-%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91&quot; aria-label=&quot;ormobject relational mapping 객체 관계 매핑 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ORM(Object-Relational Mapping), 객체-관계 매핑&lt;/h3&gt;
&lt;p&gt;데이터베이스 데이터 &amp;#x3C;—매핑—&gt; Object 필드&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체를 통해 간접적으로 데이터베이스 데이터를 다룸&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결) 해주는 것을 말한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ORM을 이요하면 SQL Query가 아닌 직관적인 코드(메서드)로 데이터를 조작가능&lt;/li&gt;
&lt;li&gt;객체 간의 관계를 바탕으로 SQL을 자동으로 생성 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Persistence API&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JPA, Hibernate&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;jpajava-persistent-api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jpajava-persistent-api&quot; aria-label=&quot;jpajava persistent api permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JPA(Java Persistent API)&lt;/h2&gt;
&lt;p&gt;자바 ORM 기술에 대한 API 표준 명세&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JAVA SE, JAVA 플랫폼 EE를 사용하는 응용프로그램에서 RDB의 관리를 표현하는 자바 API&lt;/li&gt;
&lt;li&gt;JPA는 ORM을 사용하기 위한 표준 인터페이스를 모아둔 것&lt;/li&gt;
&lt;li&gt;기존 EJB에서 제공되던 엔티티 빈(Entity Bean)을 대체하는 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JPA 구성요소 3가지&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;javax.persistence&lt;/code&gt; 에서 제공하는 모든 것&lt;/li&gt;
&lt;li&gt;JPQL (Java Persistence Query Language)&lt;/li&gt;
&lt;li&gt;객체/관계 메타데이터&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;사용자가 원하는 JPA 구현체를 선택 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JPA의 구현체로 Hibernate, EclipseLink, DataNucleus, OpenJPA, TopLink Essentials등이 존재&lt;/li&gt;
&lt;li&gt;이들을 ORM Framework라고 부름&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;hibernate&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#hibernate&quot; aria-label=&quot;hibernate permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hibernate&lt;/h2&gt;
&lt;p&gt;JPA의 구현체 중 하나&lt;br&gt;
SQL을 직접 사용하지 않는다고 해서 JDBC API를 사용하지 않는다는 것은 아님  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;지원하는 메서드 내부에서는 JDBC API가 동작하고 있음, 단지 개발자가 SQL을 직접 작성하지 않을 뿐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HQL(Hibernate Query Language) 라는 강력한 쿼리 언어 포함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL과 비슷하며, 추가적인 컨벤션 정의 가능&lt;/li&gt;
&lt;li&gt;완전히 객체 지향적이며 이로써 상속, 다형성, 관계등의 객체지향 강점을 누릴 수 있다.&lt;/li&gt;
&lt;li&gt;자바 클래스와 프로퍼티의 이름을 제외하고는 대소문자 구분&lt;/li&gt;
&lt;li&gt;쿼리 결과로 객체를 반환하며 프로그래머에 의해 생성되고 직접적으로 접근 가능&lt;/li&gt;
&lt;li&gt;SQL에서는 지원하지 않는 pagenation, dynamic profiling 같은 향상된 기능 제공&lt;/li&gt;
&lt;li&gt;여러 테이블을 작업할 때 명시적인 join을 요구하지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체지향적으로 데이터를 관리, 비즈니스 로직에 집중 가능, 객체지향적 개발 가능&lt;/li&gt;
&lt;li&gt;테이블 생성, 변경, 관리가 쉽다&lt;/li&gt;
&lt;li&gt;로직을 쿼리에 집중하기 보단 객체 자체에 집중 가능&lt;/li&gt;
&lt;li&gt;빠른 개발이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어렵다 (많은 내용이 감춰져있다.)&lt;/li&gt;
&lt;li&gt;잘 이해하고 쓰지 않으면 데이터 손실이 있을 수 있다. (persistence context)&lt;/li&gt;
&lt;li&gt;성능상 문제가 있을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;mybatis&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mybatis&quot; aria-label=&quot;mybatis permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mybatis&lt;/h2&gt;
&lt;p&gt;개발자가 지정한 SQL, 저장 프로시저 그리고 몇 가지 고급 매핑을 지원하는 SQL Mapper&lt;br&gt;
JDBC로 처리하는 상당 부분의 코드와 파라미터 설정 및 결과 매핑을 대신해준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기존에 JDBC를 사용할 때는 DB와 관련된 여러 복잡한 설정(Connection)등을 다루어야하나, SQL Mapper는 자바 객체를 실제 SQL문제 연결해, 빠른 개발과 편리한 테스트 환경을 얻음  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;데이터베이스 레코드에 원시 타입과 Map 인터페이스, 그리고 자바 POJO를 설정해 매핑하기 위해 xml과 Annotation 사용 가능&lt;br&gt;
MyBatis는 원래 Apache Foundation의 iBatis였으나 생산성, 개발 프로세스, 커뮤니티 등의 이유로 Google Code로 이전되면서 이름이 바뀜  &lt;/p&gt;
&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL에 대한 모든 컨트롤을 하고자 할 때 매우 적합&lt;/li&gt;
&lt;li&gt;SQL쿼리들이 매우 잘 최적화되어 있을 때 유용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어플리케이션과 데이터베이스 간의 설계에 대한 모든 조작을 하고자 할 때는 적합하지 않음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서로 잘 구조화 되도록 많은 설정이 바뀌어야 하기 때문&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[NHN 베이스캠프 1주차]]></title><description><![CDATA[NHN 베이스캠프 1주차 소감]]></description><link>https://hyun-cho.github.io/posts/회고록/NHN 베이스캠프 1주차</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/회고록/NHN 베이스캠프 1주차</guid><pubDate>Sun, 24 Jan 2021 09:08:23 GMT</pubDate><content:encoded>&lt;h2 id=&quot;nhn-베이스캠프-1주차-소감&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#nhn-%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%BA%A0%ED%94%84-1%EC%A3%BC%EC%B0%A8-%EC%86%8C%EA%B0%90&quot; aria-label=&quot;nhn 베이스캠프 1주차 소감 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;NHN 베이스캠프 1주차 소감&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;NHN 인사교육이 끝나고 첫 주가 끝난 소감을 간단하게 적는다.  &lt;/p&gt;
&lt;h3 id=&quot;맥북과-내-자리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%A5%EB%B6%81%EA%B3%BC-%EB%82%B4-%EC%9E%90%EB%A6%AC&quot; aria-label=&quot;맥북과 내 자리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;맥북과 내 자리&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;월요일 팀을 배정받고 내 자리가 생겼다.&lt;br&gt;
인사교육동안 뭔가 불편했던 자리에 비해서 공간도 넓고, 사무실은 깔끔한 분위기까지 너무 좋았다. 이어서 맥북을 수령받았는데, 나는 이전까지 맥북을 사용 해 본적이 없었기 때문에 하루를 간단한 설정과, 커맨드를 익히는데 쓴 것 같다. 금요일인 지금 어느정도 익숙해지기는 했지만 누군가 좋은 기능이 있다면 공유해 주었으면 좋겠다.&lt;br&gt;
옆 자리에 앉은 동기분이 여러가지 알려줘서 정말 다행이었다고 생각한다.&lt;/p&gt;
&lt;h3 id=&quot;사전-과제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%A0%84-%EA%B3%BC%EC%A0%9C&quot; aria-label=&quot;사전 과제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;사전 과제&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;사전과제는 스프링 부트에 대한 책의 과제를 그대로 따라하는 것이었다. 앞서 스프링 기본개념에 대한 책을 살짝 공부했었는데, 그 때 읽었던 내용(AOP, DI, Bean등등)이 가물가물 생각나면서 하나씩 따라 한 것 같다.&lt;br&gt;
과제는 큰 무리없이 전부 따라해 마무리 했는데, 이후 치르게 된 사전과제 시험결과를 보며 아직도 많이 부족하다고 느낀다..&lt;br&gt;
사전과제를 진행하면서 깃허브 이슈관리를 최대한 이용해보고자 했는데, 처음 사용해보는 것이라 그런지 큰 분류 없이 진행했다. 결과 크게 이슈관리가 되었다고 느끼기에는 무리가 있었다. 이슈관리 부분은 좀 더 알아보고 적용시켜 봐야겠다.&lt;/p&gt;
&lt;h3 id=&quot;기술-블로그&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EC%88%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8&quot; aria-label=&quot;기술 블로그 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;기술 블로그&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;포트폴리오를 준비하면서 Github Pages를 사용했던 경험을 바탕으로 블로그를 만들었다.&lt;br&gt;
원래 사용하려고 했던 Jekyll 테마 블로그를 사용하려고 했었는데, 앞으로 FE를 공부하면서 기능 추가를 할 것 같은데, Jekyll + Ruby를 사용하는 것보단 Gatsby + React를 사용하는 편이 더 낫겠다고 생각해서 Gatsby관련 테마를 찾아보고 배포한 것 같다.&lt;br&gt;
해당 내용으로 하나의 포스팅을 하고, 루키분들께 공유했는데 글을 많이 써보지 못해서 가독성이 많이 떨어졌던것 같다.&lt;br&gt;
현재는 disqus 기능이 탑재된 lumen 테마로 변경하였다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[M:N 관계의 설계와 구현]]></title><description><![CDATA[코드로 배우는 스프링부트 part4/chapter7 M:N 관계의 설계와 구현]]></description><link>https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part4/M:N 관계의 설계와 구현</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part4/M:N 관계의 설계와 구현</guid><pubDate>Wed, 20 Jan 2021 23:46:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;chapter7-mn-관계의-설계와-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter7-mn-%EA%B4%80%EA%B3%84%EC%9D%98-%EC%84%A4%EA%B3%84%EC%99%80-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;chapter7 mn 관계의 설계와 구현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chapter7 M:N 관계의 설계와 구현&lt;/h1&gt;
&lt;p&gt;이번 장에서는 M:N (영화 : 리뷰) 관계에 대해서 구현&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;학생과 수업&lt;/li&gt;
&lt;li&gt;상품과 상품 카테고리&lt;/li&gt;
&lt;li&gt;상품과 회원&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실제 테이블로 설계할 수가 없다. 고정된 개수의 칼럼을 가지고 있기 때문&lt;br&gt;
데이터베이스는 정형화된 구조를 가지기 때문에, 수평적 확장은 불가  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수평적 확장 : 컬럼 확장&lt;/li&gt;
&lt;li&gt;수직적 확장 : 레코드 증가 (row)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 문제를 해결하기 위해서 매핑(mapping) 테이블을 사용(연결테이블)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;두 테이블에서 필요한 정보를 끌어서 쓰는 구조&lt;/li&gt;
&lt;li&gt;작성 이전에 다른 테이블들이 먼저 존재해야 한다.&lt;/li&gt;
&lt;li&gt;주로 ‘명사’가 아닌 ‘동사’나 ‘히스토리’에 대한 데이터를 보관하는 용도&lt;/li&gt;
&lt;li&gt;중간에서 양쪽의 PK를 참조하는 형태&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;jpa에서-mn-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jpa%EC%97%90%EC%84%9C-mn-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;jpa에서 mn 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JPA에서 M:N 처리&lt;/h2&gt;
&lt;p&gt;크게 보면 두 가지  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@ManyToMany&lt;/code&gt; 를 이용해서 처리&lt;/li&gt;
&lt;li&gt;별도의 엔티티를 설계하고, &lt;code class=&quot;language-text&quot;&gt;@ManyToOne&lt;/code&gt;을 이용해서 처리하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@ManyToMany&lt;/code&gt;에서는 사실 몇 가지 문제가 존재&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장성하려는 예제에서 사용하기 힘듬(영화의 평점 등 정보는 리뷰에 종속되기 때문)&lt;/li&gt;
&lt;li&gt;양방향 참조를 이용하는데, 주의가 필요&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JPA의 실행에서 중요한 현재 메모리상 엔티티 객체들의 상태와 데이터베이스의 상태를 동기화 시키는 것&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이러한 성질은 양방향 참조에서 유지하기는 간단하지 않다.&lt;/li&gt;
&lt;li&gt;실무에서도 최대한 ‘단방향 참조’를 위주로 프로젝트를 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;본 프로젝트에서는 중간에 직접 매핑 테이블을 설계 + 직접 매핑 관계를 연결&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;예제-프로젝트-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%A0%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;예제 프로젝트 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예제 프로젝트 생성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;project 이름 : mreview&lt;/li&gt;
&lt;li&gt;gradle&lt;/li&gt;
&lt;li&gt;war 패키징&lt;/li&gt;
&lt;li&gt;Spring Boot DevTools&lt;/li&gt;
&lt;li&gt;Lombok&lt;/li&gt;
&lt;li&gt;Spring Web,&lt;/li&gt;
&lt;li&gt;Thymeleaf,&lt;/li&gt;
&lt;li&gt;Spring Data JPA&lt;/li&gt;
&lt;li&gt;mariadb 드라이버&lt;/li&gt;
&lt;li&gt;thymeleaf-extras 라이브러리 java8time&lt;/li&gt;
&lt;li&gt;application.properties에 데이터베이스, jpa, thymeleaf 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;매핑-테이블을-위한-review-클래스-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%A4%ED%95%91-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EC%9C%84%ED%95%9C-review-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;매핑 테이블을 위한 review 클래스 설계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;매핑 테이블을 위한 Review 클래스 설계&lt;/h2&gt;
&lt;h2 id=&quot;uuid란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#uuid%EB%9E%80&quot; aria-label=&quot;uuid란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;UUID?란&lt;/h2&gt;
&lt;h2 id=&quot;영화-조회-화면에서-필요한-정보&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%81%ED%99%94-%EC%A1%B0%ED%9A%8C-%ED%99%94%EB%A9%B4%EC%97%90%EC%84%9C-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4&quot; aria-label=&quot;영화 조회 화면에서 필요한 정보 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;영화 조회 화면에서 필요한 정보&lt;/h2&gt;
&lt;p&gt;목록 화면에서 영화의 제목과 이미지, 영화 리뷰의 평점/리뷰 개수를 출력&lt;br&gt;
영화 조회 화면에서 영화와 영화의 이미지들, 리뷰의 평균점수/리뷰 개수를 같이 출력&lt;br&gt;
리뷰에 대한 정보에는 회원의 이메일이나 닉네임(nickname)과 같은 정보를 같이 출력  &lt;/p&gt;
&lt;h3 id=&quot;조회-쿼리-문제점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A1%B0%ED%9A%8C-%EC%BF%BC%EB%A6%AC-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; aria-label=&quot;조회 쿼리 문제점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;조회 쿼리 문제점&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;select m, max(mi), avg(coalesce(r.grade, 0)), count(distinct r) &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;from Movie m &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;left outer join MovieImage mi on mi.movie = m &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;left outer join Review r on r.movie = m &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;token string&quot;&gt;&quot;group by m&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;중간에 위와 같은 쿼리를 만들게 되는데, 위 코드를 실행하면 예상과 달리, 각 영화마다 이미지를 찾는 쿼리가 실행되 비효율적  &lt;/p&gt;
&lt;p&gt;중복되는 쿼리의 내용은, movie_image 테이블에서 해당하는 모든 영화의 이미지를 다 가져오는 쿼리  &lt;/p&gt;
&lt;p&gt;이 이유는 목록을 가져오는 쿼리는 문제가 없으나, max()를 이용하는 부분이 들어가며, 해당 영화의 모든 이미지를 가져오는 쿼리가 실행  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 문제는 (N+1 Problem)이라고 부름&lt;/li&gt;
&lt;li&gt;위 예시에서의 문제점은 이미지를 1개로 줄여서 처리하는 것으로 해결&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;n1-problem&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#n1-problem&quot; aria-label=&quot;n1 problem permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;N+1 Problem?&lt;/h3&gt;
&lt;p&gt;1번의 쿼리로 N개의 데이터를 가져왔는데, N개의 데이터를 처리하기 위해서 필요한 추가 적인 쿼리가 N개에 대해서 수행되는 상황&lt;br&gt;
1페이지에 해당하는 10개의 데이터를 가져오는 쿼리 1번과, 각 영화의 모든 이미지를 가져오기 위한 10번의 추가적인 쿼리가 실행&lt;br&gt;
한 페이지마다 11번의 쿼리가 실행되기 때문에 성능에 커다란 문제  &lt;/p&gt;
&lt;h3 id=&quot;testgetmoviereviews-에서의-문제점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#testgetmoviereviews-%EC%97%90%EC%84%9C%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; aria-label=&quot;testgetmoviereviews 에서의 문제점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;testGetMovieReviews 에서의 문제점&lt;/h3&gt;
&lt;p&gt;Review 클래스의 Member에 대한 Fetch 방식이 LAZY이기 때문에 처리시마다 Member객체를 조회해야하는 문제&lt;br&gt;
해결할 수 있는 방법 두가지  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@Query 구문에 조인처리를 한다.&lt;/li&gt;
&lt;li&gt;@EntityGraph를 이용해서 Review 객체를 가져올 때 Member 객체를 로딩하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@EntityGraph&lt;/code&gt;의 경우, 엔티티의 특정 속성을 같이 로딩하도록 표시하는 어노테이션&lt;br&gt;
JPA를 이용할 경우, 연관관계의 FETCH 속성은 거의 LAZY&lt;br&gt;
@EntityGraph는 이러한 상황에서 특정 기능을 수행할 때만 EAGER로딩을 하도록 설정&lt;br&gt;
다음과 같은 속성과 type을 가진다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attributePaths&lt;/strong&gt; : 로딩 설정을 변경하고 싶은 속성의 이름을 배열로 명시&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; : @EntityGraph를 어떤 방식으로 적용할 것인지 설정&lt;/li&gt;
&lt;li&gt;Fatch 속성값은 attributePaths에 명시한 속성은 EAGER로 처리하고, 나머지는 LAZY로 처리&lt;/li&gt;
&lt;li&gt;LOAD 속성값은 attributePaths에 명시한 속성은 EAGER로 처리하고, 나머지는 엔티티 클래스에 명시되거나 기본 방식으로 처리&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[파일 업로드 처리]]></title><description><![CDATA[코드로 배우는 스프링부트 part4/chapter7 파일 업로드 처리]]></description><link>https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part4/파일 업로드 처리</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part4/파일 업로드 처리</guid><pubDate>Wed, 20 Jan 2021 23:46:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;chapter-8-파일-업로드-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter-8-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;chapter 8 파일 업로드 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chapter 8 파일 업로드 처리&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;파일 업로드는 하나의 챕터로 나누었나보다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;spring에서-파일업로드-하는-방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring%EC%97%90%EC%84%9C-%ED%8C%8C%EC%9D%BC%EC%97%85%EB%A1%9C%EB%93%9C-%ED%95%98%EB%8A%94-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;spring에서 파일업로드 하는 방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;spring에서 파일업로드 하는 방식&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스프링 부트로 파일을 업로드 하는데 두가지 방식이 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;별도의 업로드 라이브러리(commons - fileupload 등)&lt;/li&gt;
&lt;li&gt;Servlet 3버전 이후로 사용가능한 자체 파일 업로드 라이브러리&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파일-업로드를-위한-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;파일 업로드를 위한 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일 업로드를 위한 설정&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;spring servlet 파일 업로드를 위한 설정 (spring.servlet.multipart)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;enabled : 파일 업로드 가능 여부를 선택&lt;/li&gt;
&lt;li&gt;location : 업로드 된 파일의 임시저장경로&lt;/li&gt;
&lt;li&gt;max-request-size : 한 번에 최대 업로드 가능 용량&lt;/li&gt;
&lt;li&gt;max-file-size : 파일 하나의 최대 크기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;spring.servlet.multipart.enabled=true
spring.servlet.multipart.location=/Users/nhn/Workspace/upload
spring.servlet.multipart.max-request-size = 30MB
spring.servlet.multipart.max-file-size = 10MB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;파일-업로드-시-고려해야할-사항들&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C-%EC%8B%9C-%EA%B3%A0%EB%A0%A4%ED%95%B4%EC%95%BC%ED%95%A0-%EC%82%AC%ED%95%AD%EB%93%A4&quot; aria-label=&quot;파일 업로드 시 고려해야할 사항들 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일 업로드 시 고려해야할 사항들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;업로드된 확장자가 이미지만 가능하도록 검사(첨부파일을 이요한 원격 셀)&lt;/li&gt;
&lt;li&gt;동일한 이름의 파일이 업로드 된다면 기존 파일을 덮어쓰는 문제&lt;/li&gt;
&lt;li&gt;업로드된 파일을 저장하는 폴더의 용량&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;동일-파일명-문제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%9D%BC-%ED%8C%8C%EC%9D%BC%EB%AA%85-%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;동일 파일명 문제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동일 파일명 문제&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기존의 파일이 사라지고 새로운 파일로 변경되기 때문에 주의&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이를 막기 위해서 고유한 이름을 생성해 파일이름으로 사용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시간 값을 파일 이름에 추가하거나&lt;/li&gt;
&lt;li&gt;UUID를 이용해서 고유한 값을 만들어서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;동일한-파일에-너무-많은-파일-저장&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%9D%BC%ED%95%9C-%ED%8C%8C%EC%9D%BC%EC%97%90-%EB%84%88%EB%AC%B4-%EB%A7%8E%EC%9D%80-%ED%8C%8C%EC%9D%BC-%EC%A0%80%EC%9E%A5&quot; aria-label=&quot;동일한 파일에 너무 많은 파일 저장 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동일한 파일에 너무 많은 파일 저장&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;한 폴더 내에 너무 많은 파일이 쌓이면 성능이 저하됨&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제에 따라 하나의 폴더에 넣을 수 있는 파일의 수도 제한&lt;/li&gt;
&lt;li&gt;일반적으로 가장 많이 쓰이는 방법은 파일이 저장되는 시점을 저장해서 년/월/일로 구분해서 쓰는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;파일의-확장자-체크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC%EC%9D%98-%ED%99%95%EC%9E%A5%EC%9E%90-%EC%B2%B4%ED%81%AC&quot; aria-label=&quot;파일의 확장자 체크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일의 확장자 체크&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;첨부파일을 이용해 쉘 스크립트 파일 등을 업로드해서 공격하는 기법도 있기 때문에, 이를 검사하는 과정을 거쳐야함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multipartFile에서 제공하는 getContentType()를 이용해서 처리 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;섬네일-이미지-생성과-화면처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%AC%EB%84%A4%EC%9D%BC-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%99%94%EB%A9%B4%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;섬네일 이미지 생성과 화면처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;섬네일 이미지 생성과 화면처리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;원본 이미지를 노출하기에는 데이터를 많이 소비해야 하기 때문에, 섬네일을 만들어 전송합니다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이미지 처리는 다음과 같은 과정으로 처리합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;업로드된 파일을 저장하고 섬네일 라이브러리를 활용해서 섬네일 파일을 만들어준다.&lt;/li&gt;
&lt;li&gt;섬네일 파일은 파일의 맨 앞에 ‘s_‘를 붙여서 구분한다.&lt;/li&gt;
&lt;li&gt;ResultDTO에 getThumbnailURL()을 추가해서 섬네일의 경로를 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 태그로 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;섬네일 처리를 위해 java.imageio 패키지 이용가능 / Thumbnailator 라이브러리를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;chapter9&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter9&quot; aria-label=&quot;chapter9 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chapter9&lt;/h1&gt;
&lt;p&gt;Chapter 9 의 경우 책의 내용을 따라하면 무리없이 진행할 수 있었다.&lt;br&gt;
따라서 따로 글은 작성하지 않겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[방명록 구현하기]]></title><description><![CDATA[코드로 배우는 스프링부트 part2/chapter4 방명록 구현하기]]></description><link>https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part2/방명록 구현하기</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part2/방명록 구현하기</guid><pubDate>Wed, 20 Jan 2021 23:46:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;프로젝트-구조-만들기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;프로젝트 구조 만들기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 구조 만들기&lt;/h1&gt;
&lt;p&gt;  프로젝트의 계층별 구조와 객체들&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Querydsl을 이용해 동적으로 검색 조건을 처리하는 방법&lt;/li&gt;
&lt;li&gt;Entity 객체와 DTO의 구분&lt;/li&gt;
&lt;li&gt;화면에서의 페이징 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로젝트-구현-목록&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%ED%98%84-%EB%AA%A9%EB%A1%9D&quot; aria-label=&quot;프로젝트 구현 목록 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 구현 목록&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;기능&lt;/th&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;GET/POST&lt;/th&gt;
&lt;th&gt;기능&lt;/th&gt;
&lt;th&gt;Redirect URL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;목록&lt;/td&gt;
&lt;td&gt;/guestbook/list&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;목록/페이징/검색&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;등록&lt;/td&gt;
&lt;td&gt;/guestbook/register&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;입력 화면&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/guestbook/register&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;등록 처리&lt;/td&gt;
&lt;td&gt;/guestbook/list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;조회&lt;/td&gt;
&lt;td&gt;/guestbook/read&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;조회화면&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;수정&lt;/td&gt;
&lt;td&gt;/guestbook/modify&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;수정/삭제 가능 화면&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/guestbook/modify&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;수정 처리&lt;/td&gt;
&lt;td&gt;/guestbook/read&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;삭제&lt;/td&gt;
&lt;td&gt;/guestbook/remote&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;삭제 처리&lt;/td&gt;
&lt;td&gt;/guestbook/list&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;프로젝트-기본-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;프로젝트 기본 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 기본 구조&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thymeleaf Page&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Controller 계층&lt;/strong&gt; : GuestbookController&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Service 계층&lt;/strong&gt; : GuestbookService Interface / GuestbookServiceImpl class&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Repository 계층&lt;/strong&gt; : GuestbookRepository
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;브라우저의 Request는 GuestbookController에서 처리&lt;/li&gt;
&lt;li&gt;GuestbookController는 GuestbookService 타입을 주고받는 구조&lt;/li&gt;
&lt;li&gt;GuestbookRepository는 Spring Data JPA를 사용해 구성, GuestbookServiceImpl에 주입해 사용&lt;/li&gt;
&lt;li&gt;Thymeleaf를 이용해서 레이아웃 템플릿을 활용해 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/77606318/105665914-6220bb00-5f1b-11eb-899d-60691a7283da.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;브라우저에서 전달되는 Request는 GuestbookController에서 DTO의 형태로 처리&lt;/li&gt;
&lt;li&gt;Repository에서 엔티티 타입을 이용하므로 중간에 Service와 엔티티의 변환을 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;엔티티-객체와-dto&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%94%ED%8B%B0%ED%8B%B0-%EA%B0%9D%EC%B2%B4%EC%99%80-dto&quot; aria-label=&quot;엔티티 객체와 dto permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;엔티티 객체와 DTO&lt;/h3&gt;
&lt;p&gt;Thymeleaf - Controller - Service 계층 사이에서는 DTO로 전달&lt;br&gt;
Service - Repository 계층 사이에서는 엔티티 객체로 전달&lt;br&gt;
Service계층에서 DTO와 엔티티 객체 사이의 변환을 처리  &lt;/p&gt;
&lt;h2 id=&quot;자동으로-처리되는-날짜시간-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EC%B2%98%EB%A6%AC%EB%90%98%EB%8A%94-%EB%82%A0%EC%A7%9C%EC%8B%9C%EA%B0%84-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;자동으로 처리되는 날짜시간 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자동으로 처리되는 날짜/시간 설정&lt;/h2&gt;
&lt;p&gt;데이터의 등록 시간, 수정 시간과 같이 자동으로 추가되고 변경되는 칼럼이 존재&lt;br&gt;
어노테이션을 활용하여 자동화  &lt;/p&gt;
&lt;h3 id=&quot;mybatis와-jpa의-차이점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mybatis%EC%99%80-jpa%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90&quot; aria-label=&quot;mybatis와 jpa의 차이점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mybatis와 JPA의 차이점&lt;/h3&gt;
&lt;p&gt;JPA는 JPA 고유한 메모리 공간(&lt;code class=&quot;language-text&quot;&gt;context&lt;/code&gt;)을 이용해 엔티티 객체들을 관리&lt;br&gt;
기존의 MyBatis 기반의 프로그램보다 한단계 추가&lt;br&gt;
MyBatis의 경우 SQL을 위해 전달되는 객체는 모두 SQL처리가 끝난 후 상관이 없는 객체드&lt;br&gt;
JPA에서의 엔티티 객체들은 영속 콘텍스트(Persistence Context) 라는 곳에서 관리하는 객체&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 객체가 변경되면, 결과적으로 데이터베이스가 변경된다.&lt;/li&gt;
&lt;li&gt;JPA 엔티티 객체는 유지되며, 필요할 때 꺼내서 재사용하는 방식이다.&lt;/li&gt;
&lt;li&gt;엔티티 객체에는 어떤 변화가 일어나는 것을 감지하는 리스너(listener)가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;동적-쿼리를-위한-querydsl-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-querydsl-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;동적 쿼리를 위한 querydsl 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동적 쿼리를 위한 Querydsl 설정&lt;/h2&gt;
&lt;p&gt;JPA 쿼리 메서드나 @Query는 선언할 때 고정된 형태의 값을 가진다는 단점&lt;br&gt;
복합한 조건의 경우 동적으로 쿼리를 생성해서 처리하는 기능이 필요&lt;br&gt;
이 때 쓰이는 기술이 &lt;code class=&quot;language-text&quot;&gt;Querydsl&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;작성된 엔티티 클래스를 그대로 사용하는 것이 아닌 &lt;code class=&quot;language-text&quot;&gt;Q도메인&lt;/code&gt; 이라는 것을 이용&lt;/li&gt;
&lt;li&gt;gradle setting을 완료하고 빌드하게 되면 build 폴더 내에 엔티티들을 Q도메인으로 자동 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;querydsl-사용법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#querydsl-%EC%82%AC%EC%9A%A9%EB%B2%95&quot; aria-label=&quot;querydsl 사용법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Querydsl 사용법&lt;/h3&gt;
&lt;p&gt;BooleanBuilder를 생성&lt;br&gt;
조건에 맞는 구문은 Querydsl에서 사용하는 Predicate 타입의 함수를 생성&lt;br&gt;
BooleanBuilder에 작성된 Predicate를 추가하고 실행  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testQuery1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Pageable&lt;/span&gt; pageable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PageRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;gno&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;descending&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;QGuestbook&lt;/span&gt; qGuestbook &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;QGuestbook&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;guestbook&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; keyword &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;BooleanBuilder&lt;/span&gt; builder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BooleanBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//2&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;BooleanExpression&lt;/span&gt; expression &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; qGuestbook&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keyword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//3&lt;/span&gt;

    builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//4&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Guestbook&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; guestbookRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;builder&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pageable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 5&lt;/span&gt;

    result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;guestbook &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;guestbook&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Q도메인 클래스를 얻어옴&lt;/li&gt;
&lt;li&gt;BooleanBuilder는 where문에 들어가는 조건을 넣어주는 컨테이너&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;원하는 조건은 필드 값과 같이 결합해서 생성. BooleanBuilder 안에 들어가는 값은 com.querydsl.core.types.Predicate 타입이어야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 안에 있는 Predicate가 아니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만들어진 조건은 where문에 and, or같은 키워드와 결합&lt;/li&gt;
&lt;li&gt;BooleanBuilder는 GuestbookRepository에 추가된 QuerydslPredicateExcutor 인터페이스의 findAll() 사용 가능&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;서비스-계층과-dtodata-transfer-object&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%B8%B5%EA%B3%BC-dtodata-transfer-object&quot; aria-label=&quot;서비스 계층과 dtodata transfer object permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서비스 계층과 DTO(Data Transfer Object)&lt;/h2&gt;
&lt;p&gt;DTO는 엔티티 객체와 달리 각 계층끼리 주고받는 우편물이나 상자의 개념&lt;br&gt;
데이터를 담고있다는 점에서 엔티티 객체와 유사&lt;br&gt;
목적 자체가 데이터의 전달&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;읽고, 쓰는 것이 모두 허용&lt;/li&gt;
&lt;li&gt;일회성으로 사용되는 성격이 강함  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JPA를 사용하게 되면 엔티티는 실제 데이터 베이스와 관련이 있다.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내부적으로 entity manager가 관리하는 객체&lt;/li&gt;
&lt;li&gt;내부 생명주기가 있기 때문에 별도로 관리하는 것을 추천&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dto&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dto&quot; aria-label=&quot;dto permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DTO&lt;/h3&gt;
&lt;p&gt;DTO를 사용하게 되면 엔티티 객체의 범위를 한정 지을 수 있기 때문에 좀 더 안전한 코드를 작성가능&lt;br&gt;
가장 큰 단점  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;엔티티와 유사한 코드를 중복으로 개발한다는 점&lt;/li&gt;
&lt;li&gt;엔티티 객체를 DTO로 변환하거나 반대 경우에 과정이 필요하다
생성 된 DTO의 경우에 엔티티와 거의 동일한 필드를 가지고 Getter/Setter를 구현  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;service&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#service&quot; aria-label=&quot;service permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Service&lt;/h3&gt;
&lt;p&gt;service에서는 파라미터를 dto 타입으로 받기 때문에 이를 jpa로 변환처리 해야됨  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DTO 클래스에 적용&lt;/li&gt;
&lt;li&gt;ModelMapper라이브러리 사용&lt;/li&gt;
&lt;li&gt;MapStruct 등이용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;목록-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A9%EB%A1%9D-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;목록 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;목록 처리&lt;/h2&gt;
&lt;p&gt;목록 처리를 위해 다음과 같은 상황 고려  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;화면에서 필요한 목록 데이터에 대한 DTO 생성&lt;/li&gt;
&lt;li&gt;DTO를 Pageable 타입으로 전환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Page&amp;lt;Entity&amp;gt;&lt;/code&gt;를 화면에서 사용하기 쉬운 DTO의 리스트 등으로 변환&lt;/li&gt;
&lt;li&gt;화면에 필요한 페이지 번호 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;목록 처리를 위한 DTO  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;페이지 요청 처리 DTO (PageRequestDTO)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;목록 페이지를 요청할 때 사용하는 데이터를 재사용&lt;/li&gt;
&lt;li&gt;페이지 번호, 페이지 내 목록의 개수, 검색조건 등등&lt;/li&gt;
&lt;li&gt;이런 파라미터를 DTO로 선언하고 나중에 재사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;페이지 결과 처리 DTO (PageResultDTO)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JPA를 이용한 Repository에서는 페이지 처리 결과를 &lt;code class=&quot;language-text&quot;&gt;Page&amp;lt;Entity&amp;gt;&lt;/code&gt; 타입으로 반환&lt;/li&gt;
&lt;li&gt;서비스 계층에서 이를 처리하기 위해서 별도의 클래스를 만들어 처리&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Page&amp;lt;Entity&amp;gt;&lt;/code&gt;의 엔티티 객체들을 DTO 객체로 변환해 자료구조로 담아주어야한다.&lt;/li&gt;
&lt;li&gt;화면 출력에 필요한 페이지 정보들을 구성 해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;목록-데이터-페이지-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A9%EB%A1%9D-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;목록 데이터 페이지 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;목록 데이터 페이지 처리&lt;/h3&gt;
&lt;p&gt;PageResultDTO가 화면까지 전달되고, 이를 이앵효 페이지 처리를 하게 된다.&lt;br&gt;
PageResultDTO의 구성은 다음과 같다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;화면에서 시작 페이지 번호 &lt;code class=&quot;language-text&quot;&gt;start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;화면에서 끝 페이지 번호 &lt;code class=&quot;language-text&quot;&gt;end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이전/다음 이동 링크 여부 &lt;code class=&quot;language-text&quot;&gt;prev, enxt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;현재 페이지 번호 &lt;code class=&quot;language-text&quot;&gt;page&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 끝 번호 구하는 공식&lt;/span&gt;
tempEnd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;페이지번호 &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.ceil()은 소수점을 올림으로 처리하기 때문에 다음과 같은 상황이 가능  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;tempEnd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// = 10 1페이지;&lt;/span&gt;
tempEnd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;// = 10 10페이지;&lt;/span&gt;
tempEnd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// = 20 11페이지;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;시작 페이지 번호는 끝 번호 - 9로 구한다.&lt;br&gt;
끝 번호를 실제 마지막 페이지와 다시 비교.   &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;totalPage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTotalPages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// result : Page&amp;lt;GuestBook&gt;&lt;/span&gt;
end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; totalPage &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; tempEnd &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; tempEnd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; totalPage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;prev은 start &gt; 1 이라면 존재&lt;br&gt;
next는 realEnd가 끝 번호(endPage) 보다 큰 경우만 존재 next = totalPage &gt; tempEnd;  &lt;/p&gt;
&lt;h2 id=&quot;화면-구성은-실습-예제-직접-해결해보기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%99%94%EB%A9%B4-%EA%B5%AC%EC%84%B1%EC%9D%80-%EC%8B%A4%EC%8A%B5-%EC%98%88%EC%A0%9C-%EC%A7%81%EC%A0%91-%ED%95%B4%EA%B2%B0%ED%95%B4%EB%B3%B4%EA%B8%B0&quot; aria-label=&quot;화면 구성은 실습 예제 직접 해결해보기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화면 구성은 실습 예제 직접 해결해보기&lt;/h2&gt;
&lt;h2 id=&quot;검색-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B2%80%EC%83%89-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;검색 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;검색 처리&lt;/h2&gt;
&lt;p&gt;서버 사이드 처리  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PageRequestDTO에 검색 타입(type)과 키워드(keyword)를 추가&lt;/li&gt;
&lt;li&gt;이하 서비스 계층에서 Querydsl을 이요해서 검색 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;검색 항목은 크게 다음과 같이 정의  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;제목(t), 내용(c), 작성자(w)로 검색하는 경우&lt;/li&gt;
&lt;li&gt;제목 혹은 내용 으로 검색하는 경우&lt;/li&gt;
&lt;li&gt;제목 혹은 내용 혹은 작성자로 검색하는 경우만&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RequestDTO에 내용을 담아서 전달  &lt;/p&gt;</content:encoded></item><item><title><![CDATA[블로그를 생성하다]]></title><description><![CDATA[개발 블로그를 처음 만들며]]></description><link>https://hyun-cho.github.io/posts/회고록/블로그를 생성하다</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/회고록/블로그를 생성하다</guid><pubDate>Tue, 19 Jan 2021 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;회사 첫 업무로 블로그를 생성했다.&lt;/p&gt;
&lt;p&gt;사실 마크다운으로 공부한 여러 스터디 파일도 정리해서 옮겨올 생각인데, 항상 블로그를 만들어야지 만들어야지 하다가 미루고 미뤄서 지급에서야 만들었다니 조금 부끄럽네요.&lt;/p&gt;
&lt;p&gt;앞으로 제가 공부한 것들과 공유하고 싶은 내용을 블로그에 하나 둘 씩 적어봐야겠습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Gatsby와 Github Pages를 활용한 블로그 배포]]></title><description><![CDATA[개츠비를 활용한 블로그 배포]]></description><link>https://hyun-cho.github.io/posts/blog/blog/Gatsby와-Github-Pages를-활용한-블로그-배포</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/blog/blog/Gatsby와-Github-Pages를-활용한-블로그-배포</guid><pubDate>Tue, 19 Jan 2021 23:46:37 GMT</pubDate><content:encoded>&lt;h2 id=&quot;회사-첫-업무로-블로그-생성하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%9A%8C%EC%82%AC-%EC%B2%AB-%EC%97%85%EB%AC%B4%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;회사 첫 업무로 블로그 생성하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;회사 첫 업무로 블로그 생성하기&lt;/h2&gt;
&lt;p&gt;취업 준비 할 때 Github Pages를 활용하여 포트폴리오를 만든 경험이 있기 때문에, 가지고 있던 정말 작은 지식은,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;정적 페이지를 깃허브에 등록하고, Github Pages에 브랜치를 등록하면 자동으로 배포가 된다!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;라는 것이었다.  &lt;/p&gt;
&lt;p&gt;근데 정적페이지에서 html을 수정하는 방식은 한계가 있고, 기존에 널리 사용되던 블로그 배포방식인 Jekyll themes는 몇 가지 문제가 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그에 여러 기능을 추가해야한다. (facebook, 댓글 등)&lt;/li&gt;
&lt;li&gt;Jekyll을 사용하기에는 나는 Ruby언어를 모른다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;따라서 문제점을 해결해보기위해 구글링하다가 React기반의 정적페이지 생성기인 Gatsby JS에 대해 알게 되었다.&lt;/p&gt;
&lt;h2 id=&quot;gatsby-js&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gatsby-js&quot; aria-label=&quot;gatsby js permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatsby JS&lt;/h2&gt;
&lt;p&gt;Gatsby JS 공식 홈페이지에는 다음과 같이 소개되어있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gatsby is a React-based open-source framework for creating websites and apps. It’s great whether you’re building a portfolio site or blog, or a high-traffic e-commerce store or company homepage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;요약하자면 &lt;strong&gt;리액트를 기반으로하는 웹사이트/앱을 만드는 프레임워크&lt;/strong&gt; 라고 얘기할 수 있겠다.&lt;br&gt;
리액트 컴포넌트를 기반으로 뷰를 만들고, GraphQL을 통해서 정적 컨텐츠를 가져오는 방식의 정적 사이트 생성기이다.&lt;br&gt;
데이터 소스는 마크다운 파일일 수도, CMS인 워드프레스 등 다양한 플러그인을 활용해서 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;GraphQL은 나도 공부가 많이 필요한 영역이라, 일단 글을 쓸 수 있게만 만들어놓고 차근차근 공부하면서 업그레이드 할 생각이다.&lt;/p&gt;
&lt;p&gt;개발은 다음과 같은 과정을 통해서 이루어 질 예정이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gatsby를 통해 페이지를 개발 한 뒤&lt;/li&gt;
&lt;li&gt;정적페이지를 빌드해서 Github Pages에 배포&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 두가지 과정을 걸쳐서 블로그를 개발해보자.&lt;/p&gt;
&lt;h2 id=&quot;gatsby-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gatsby-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;gatsby 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatsby 설정&lt;/h2&gt;
&lt;p&gt;Macbook Pro에서 개발하고있고 OS X 를 사용하고 있으므로 더욱 쉽게 블로그를 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.org/docs/quick-start&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Gatsby Quick-Start&lt;/a&gt;를 보고 cli를 설치하자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g gatsby-cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gatsby를 설치한 뒤 여러가지 스타터 중 하나를 선택해서 시작할 예정인데,&lt;br&gt;
나는 참조한 블로그에서 사용한 minimal-blog를 사용하여 개발하려고 한다.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;다른 gatsby 블로그 테마를 가져와도 된다.&lt;/del&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gatsby new minimal-blog LekoArts/gatsby-starter-minimal-blog
    &lt;span class=&quot;token comment&quot;&gt;# gatsby new &amp;lt;프로젝트이름&gt; &amp;lt;스타터url&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기까지 &lt;code class=&quot;language-text&quot;&gt;minimal-blog&lt;/code&gt;라는 이름의 폴더가 만들어지고, &lt;code class=&quot;language-text&quot;&gt;gatsby develop&lt;/code&gt;을 입력하면 로컬호스트에 dev환경이 만들어진다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:8000/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:8000/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;참조한 블로그에서는 Gatsby에서 사용하는 쉐도윙이라는 기법으로 커스터마이징을 바로 시작했지만,
처음 사용해보는 나에게는 큰 장벽..이어서 나중에 적용해보도록 하고 이어서 배포하는 방법을 소개하려고한다.&lt;/p&gt;
&lt;h2 id=&quot;배포-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%ED%8F%AC-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;배포 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배포 설정&lt;/h2&gt;
&lt;p&gt;배포 방식에는 두가지 방식이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github Repository를 netlify.com을 사용해서 간단하게 배포하기&lt;/li&gt;
&lt;li&gt;gatsby gh-pages를 사용해서 배포하기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;전자의 경우에는 많은 자료가 있으니 찾아서 해보면 좋을 것 같고, 더 간편하다고 소개한다.&lt;br&gt;
대신 홈페이지가 netlify.app으로 나온다는점?&lt;br&gt;
나는 새로운 걸 너무 많이써서 github 내에서 해결할 수 있는 후자로 배포하기로 했다.&lt;/p&gt;
&lt;h3 id=&quot;gh-pages를-활용한-배포&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gh-pages%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%B0%B0%ED%8F%AC&quot; aria-label=&quot;gh pages를 활용한 배포 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;gh-pages를 활용한 배포&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt;는 빌드와 동시에 깃허브에 정적파일을 배포하는 형식이다.
기존의 gatsby 프로젝트는 public안에 index.html이 있고, README.md가 둘다 존재해 개발 브랜치를 기준으로 배포하게되면 README.md 만 보이게 된다.
이를 정적페이지로 빌드해서 배포하면 index.html로 화면을 보여주게 된다. &lt;del&gt;정확하지 않을 수 있습니다.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;gatsby에 gh-pages를 설치하자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i gh-pages -D&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치가 끝났으면 배포 설정을 해줘야한다.&lt;/p&gt;
&lt;p&gt;일단 생성한 gatsby 프로젝트를 개발용 브랜치로 바꾸도록하자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch -m develop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gatsby 프로젝트 설정파일인 &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;script&lt;/code&gt;부분에 다음부분을 추가한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;deploy&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;해당 내용은 개발용 브랜치에서 &lt;code class=&quot;language-text&quot;&gt;npm run deploy&lt;/code&gt;를 하면 gh-pages가 실행되서, master branch에 빌드가 완료된 배포 직전의 정보가 push 되는 내용이다.&lt;/p&gt;
&lt;p&gt;여기까지 실행을 했다면, &lt;code class=&quot;language-text&quot;&gt;minimal-blog&lt;/code&gt;가 빌드된 정적 페이지가 &lt;code class=&quot;language-text&quot;&gt;master&lt;/code&gt; branch에 저장되었을 것이다.&lt;br&gt;
이제 github repository로 돌아가 Github Pages를 master branch로 연결만 해주면 정상적으로 배포 된다.&lt;/p&gt;
&lt;p&gt;이제 gatsby develop 브랜치로 돌아와서 하나씩 수정하면서 커스터마이징하면 된다.  &lt;/p&gt;
&lt;p&gt;아래 블로그 링크를 보고 하나 씩 따라한 내용이니 참고하면 좋을 것 같다.&lt;br&gt;
쉐도윙에 대한 내용도 하단부에 언급되어 있으니 관심 있으신분은 따라해보면 좋을 것 같다.
&lt;a href=&quot;https://juneyr.dev/jekyll-to-gatsby-%EB%B8%94%EB%A1%9C%EA%B7%B8-%F0%9F%91%A9%E2%80%8D%F0%9F%94%A7&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;블로그 링크&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;후기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%9B%84%EA%B8%B0&quot; aria-label=&quot;후기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;후기&lt;/h2&gt;
&lt;p&gt;배포한 홈페이지는 &lt;a href=&quot;hyun-cho.github.io&quot;&gt;hyun-cho.github.io&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;내가 배포한 방식을 간략하게 (생략한 부분이 정말 많다..) 적었는데 중간과정을 다 날려버린것 같아서 뭔가… 글이 아쉽다.&lt;br&gt;
좀 더 글쓰기 연습을 해야 할 것 같은 느낌&lt;/p&gt;</content:encoded></item><item><title><![CDATA[스프링 부트 프로젝트 준비하기]]></title><description><![CDATA[코드로 배우는 스프링부트 part1/chapter1 스프링 부트 프로젝트 준비하기]]></description><link>https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part1/스프링 부트 프로젝트 준비하기</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part1/스프링 부트 프로젝트 준비하기</guid><pubDate>Tue, 19 Jan 2021 23:46:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;chapter-1-프로젝트-준비하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter-1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A4%80%EB%B9%84%ED%95%98%EA%B8%B0&quot; aria-label=&quot;chapter 1 프로젝트 준비하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chapter 1 프로젝트 준비하기&lt;/h1&gt;
&lt;h2 id=&quot;프로젝트-준비&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A4%80%EB%B9%84&quot; aria-label=&quot;프로젝트 준비 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 준비&lt;/h2&gt;
&lt;p&gt;intelliJ를 사용해서 프로젝트를 생성하고 관리합니다.  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/idea&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Intellij 개발도구 다운로드&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;본 실습은 Community 과정만 담고 있습니다. Ultimate 버전을 사용하면 많은 부분을 간편하게 사용 가능합니다.  &lt;/p&gt;
&lt;h2 id=&quot;프로젝트-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;프로젝트 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 생성&lt;/h2&gt;
&lt;p&gt;회사에서 Ultimate 버전은 아직 지원을 안해주기 때문에 Community 버전으로 프로젝트를 생성해야한다.&lt;br&gt;
Community에서는 Spring Initializer를 지원하지 않기 때문에 외부 사이트를 사용한다.  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://start.spring.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Spring Initializer&lt;/a&gt;에서 프로젝트를 생성하고 IntelliJ에서 Import하자.  &lt;/p&gt;
&lt;h2 id=&quot;lombok-플러그인-추가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lombok-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;lombok 플러그인 추가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lombok 플러그인 추가&lt;/h2&gt;
&lt;p&gt;내 프로젝트 설정 (File &gt; Setting &gt; Plugin) 에서 Lombok 플러그인을 추가하고 빌드한다.&lt;br&gt;
이미 추가되어 있다면, 사용을 위해서 기능 활성화에 대한 메시지가 나오면 &lt;code class=&quot;language-text&quot;&gt;Enable&lt;/code&gt;을 선택해서 프로젝트를 초기화한다.&lt;br&gt;
추가 되었다면 &lt;code class=&quot;language-text&quot;&gt;build.gradle&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;dependency&lt;/code&gt;에 다음과 같은 구문을 추가하자  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;gradle&quot;&gt;&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;dependencies {
	compileOnly &amp;#39;org.projectlombok:lombok&amp;#39;
	annotationProcessor &amp;#39;org.projectlombok:lombok&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2 id=&quot;프로젝트-실행&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%A4%ED%96%89&quot; aria-label=&quot;프로젝트 실행 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 실행&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;src.main.java.com.example.demo&lt;/code&gt; 안에 실행가능한 Application이 존재 할 것이다.이를 실행 시켜 보자&lt;br&gt;
만약 문제가 생겼다면 &lt;code class=&quot;language-text&quot;&gt;build.gradle&lt;/code&gt;에서의 환경설정 문제가 가장 클 것이라고 예상&lt;br&gt;
또는 &lt;code class=&quot;language-text&quot;&gt;8080port&lt;/code&gt;로 자동으로 호스팅 되는데, 여기서 문제가 생길수도 있다.&lt;br&gt;
계정 이름에서 한글을 지우고 영어로 바꿔보자.  &lt;/p&gt;
&lt;h2 id=&quot;테스트-실행&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%A4%ED%96%89&quot; aria-label=&quot;테스트 실행 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테스트 실행&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;src/test/java/com.example.demo&lt;/code&gt; 안에 이미 테스트 파일이 들어있다. 이를 실행해보자&lt;br&gt;
test환경에서 &lt;code class=&quot;language-text&quot;&gt;lombok&lt;/code&gt;을 사용하려면 다음과같이 &lt;code class=&quot;language-text&quot;&gt;test***&lt;/code&gt;으로 시작하는 구문을 추가해야한다.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;gradle&quot;&gt;&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;dependencies {
    testCompileOnly &amp;#39;org.projectlombok:lombok&amp;#39;
    testAnnotationProcessor &amp;#39;org.projectlombok:lombok&amp;#39;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;컨트롤러-클래스-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;컨트롤러 클래스 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컨트롤러 클래스 생성&lt;/h2&gt;
&lt;p&gt;컨트롤러 클래스를 생성해보자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SampleController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만약 &lt;code class=&quot;language-text&quot;&gt;@RestController&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;@GetMapping&lt;/code&gt;에 대해서 import가 나오지 않는다면, build.gradle로 돌아가 spring web을 추가해보자.(검색)&lt;br&gt;
실행 후 &lt;a href=&quot;http://localhost:8080/hello&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:8080/hello&lt;/a&gt;로 접속해보면 결과를 확인 할 수 있다.&lt;br&gt;
개발자 도구로 살펴보면, 별다른 설정 없이도 &lt;code class=&quot;language-text&quot;&gt;json&lt;/code&gt; 형식으로 전달 된 것을 볼 수 있다!  &lt;/p&gt;
&lt;h2 id=&quot;스프링-부트를-단독-실행가능파일로-만들기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EB%A5%BC-%EB%8B%A8%EB%8F%85-%EC%8B%A4%ED%96%89%EA%B0%80%EB%8A%A5%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;스프링 부트를 단독 실행가능파일로 만들기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스프링 부트를 단독 실행가능파일로 만들기&lt;/h2&gt;
&lt;p&gt;기존 프로젝트는 Tomcat과 같은 별도의 WAS가 반드시 필요했고, 이를 배포하는 과정이 수반&lt;br&gt;
스프링부트에서는 단독으로 실행가능한 웹 애플리케이션을 jar 파일의 형태로 제작하고 사용하는 것이 가능&lt;br&gt;
프로젝트 우측 &lt;code class=&quot;language-text&quot;&gt;gradle &amp;gt; Tasks &amp;gt; build &amp;gt; boorJar&lt;/code&gt;를 실행하면 jar파일이 생성된다.  &lt;/p&gt;</content:encoded></item><item><title><![CDATA[스프링 MVC와 Thymeleaf]]></title><description><![CDATA[코드로 배우는 스프링부트 part1/chapter3 스프링 MVC와 Thymeleaf]]></description><link>https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part1/스프링 MVC와 Thymeleaf</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part1/스프링 MVC와 Thymeleaf</guid><pubDate>Tue, 19 Jan 2021 23:46:37 GMT</pubDate><content:encoded>&lt;h2 id=&quot;thymeleaf-정리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#thymeleaf-%EC%A0%95%EB%A6%AC&quot; aria-label=&quot;thymeleaf 정리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thymeleaf 정리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;반복문 처리&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;th:each&lt;/code&gt;라는 속성 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;th:each=&quot;변수: ${목록}&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;반복문의 상태(state) 객체&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부가적으로 상요할 수 있는 상태(state) 객체가 존재를순번이나 인덱스 번호, 홀짝 등을 지정 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제어문 처리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;th:if ~ unless&lt;/code&gt; 등을 이용, 삼항연산자 또한 가능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;th:if, th:unless&lt;/code&gt;, 다른 언어는 &lt;code class=&quot;language-text&quot;&gt;if ~ else&lt;/code&gt; 구문이지만, Thymeleaf는 단독으로 처리함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inline 속성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주로 javaScript 처리에서 유용.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/exInline&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;exInline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RedirectAttributes&lt;/span&gt; redirectAttributes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;exInline.....&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;SampleDTO&lt;/span&gt; dto &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SampleDTO&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sno&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Frist....100&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Last....100&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    redirectAttributes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addFlashAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    redirectAttributes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addFlashAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dto&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dto&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;redirect:/sample/ex3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/ex3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ex3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ex3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;exInline()은 내부적으로 RedirectAttributes를 이용하여 ‘/ex3’으로 result와 dto라는 이름의 데이터를 심어서 전달.&lt;/li&gt;
&lt;li&gt;dto는 SampleDTO 객체&lt;/li&gt;
&lt;li&gt;javascript 생성부분을 보면&lt;/li&gt;
&lt;li&gt;문자열은 자동으로 ” “이 추가되어 문자열이 됨&lt;/li&gt;
&lt;li&gt;객체는 자동으로 JSON gudtlrdmfh qusghks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;th:block&lt;/code&gt; 기능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;별도의 태그가 필요 없기 때문에 제약이 없다.&lt;/li&gt;
&lt;li&gt;실제 화면에서는 html로 처리 되지 않는다.&lt;/li&gt;
&lt;li&gt;루프 등을 별도로 처리하는 용도로 많이 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;링크 처리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@{}&lt;/code&gt;를 사용&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;each&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dto : ${list}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@{/sample/exView(sno=${dto.sno})}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;[[${dto}]]&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;생성 후
&lt;a href=&quot;/sample/exView?sno=1&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- sno를 path로 사용하고 싶다면 다음과 같이 사용

```html
&amp;lt;li th:each=&amp;quot;dto : ${list}&amp;quot;&amp;gt;
    &amp;lt;a th:href=&amp;quot;@{/sample/exView/{sno}(sno=${dto.sno})}&amp;quot;&amp;gt;[[${dto}]]&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;

생성 후
&amp;lt;a href=&amp;quot;/sample/exView/3&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;thymeleaf의-기본-객체와-localdatetime&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#thymeleaf%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B0%9D%EC%B2%B4%EC%99%80-localdatetime&quot; aria-label=&quot;thymeleaf의 기본 객체와 localdatetime permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thymeleaf의 기본 객체와 LocalDateTime&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다양한 기본 객체 지원&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문자 숫자 파라미터 request, response, session 등&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;#numbers&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;#dates&lt;/code&gt;등을 설정없이 사용 가능&lt;/li&gt;
&lt;li&gt;숫자 포맷팅을 아래와 같이 사용가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;each&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dto : ${list}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        [[${#numbers.formatInteger(dto.sno, 5)}]]
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Java 8+ 버전에 LocalDate 타입이나 LocalDateTime에 대해서 복잡하게 처리해야된다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;thymeleaf-extras-java8time&lt;/code&gt;을 사용하면 더 편리하게 사용가능&lt;/li&gt;
&lt;li&gt;실제에서는 &lt;code class=&quot;language-text&quot;&gt;#temporals&lt;/code&gt;라는 객체를 사용해서 format()으로 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;thymeleaf의-레이아웃&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#thymeleaf%EC%9D%98-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83&quot; aria-label=&quot;thymeleaf의 레이아웃 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thymeleaf의 레이아웃&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2가지 형태로 사용가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSP의 include와 같이 특정 부분을 외부 혹은 내부에서 가져와서 포함하는 형태&lt;/li&gt;
&lt;li&gt;특정한 부분을 파라미터로 전달해서 내용에 포함하는 형태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;include-방식의-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#include-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;include 방식의 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;include 방식의 처리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;th:insert&lt;/code&gt;나 &lt;code class=&quot;language-text&quot;&gt;th:replace&lt;/code&gt;기능 - 특정한 부분을 다른 내용으로 변경&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reaplce의 경우 기존의 내용응 완전히 대체&lt;/li&gt;
&lt;li&gt;insert 방식은 기존 내용의 바깥쪽 태그는 그대로 유지하면서 추가되는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;::&lt;/code&gt; 뒤에는 fragment의 이름을 지정하거나 CSS의 #id와 같은 선택자를 이용할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;만약 &lt;code class=&quot;language-text&quot;&gt;::&lt;/code&gt;를 생략하면 파일 전체내용을 가져온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파라미터 방식의 처리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특정한 태그를 파라미터 처럼 전달해서 다른 th:fragment에서 사용 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;fragment&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;target(first, second)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;
            &lt;span class=&quot;token selector&quot;&gt;.c1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token selector&quot;&gt;.c2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;block&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;replace&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;${first}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;block&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;block&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;replace&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;${second}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;block&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;선언된 target 부분에는 first와 second라는 파라미터를 받을 수 있도록 구성&lt;/li&gt;
&lt;li&gt;또한 내부적으로 th:block으로 이를 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;block&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;replace&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;~{/fragment/fragment3:: target(~{this:: #ulFirst}, ~{this::#ulSecond} )}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ulFirst&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;AAA&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;BBB&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;CCC&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ulSecond&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;111&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;222&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;333&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;th:&lt;/span&gt;block&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;화면 구성 기능 대신 target을 사용할 때 파라미터를 2개 사용&lt;/li&gt;
&lt;li&gt;this: #ulFirst - this는 현재 페이지를 의미, 생략 가능 / #ulFirst는 CSS의 id 선택자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;layout-템플릿-만들기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#layout-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;layout 템플릿 만들기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;layout 템플릿 만들기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;layout 폴더에 layout을 만들고, content 영역에 fragment를 삽입&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;부트스트랩-템플릿-적용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%80%ED%8A%B8%EC%8A%A4%ED%8A%B8%EB%9E%A9-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;부트스트랩 템플릿 적용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;부트스트랩 템플릿 적용하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;부트스트랩 템플릿을 가져와서 레이아웃 설정해보기&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Maria 데이터베이스와 Spring Data JPA]]></title><description><![CDATA[코드로 배우는 스프링부트 part1/chapter2 Maria 데이터베이스와 Spinrg Data SPA]]></description><link>https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part1/Maria 데이터베이스와 Spinrg Data SPA</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/TIL/Spring Boot/코드로-배우는-스프링부트/part1/Maria 데이터베이스와 Spinrg Data SPA</guid><pubDate>Tue, 19 Jan 2021 23:46:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;chapter-2-maria-데이터베이스와-spring-data-jpa&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter-2-maria-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%99%80-spring-data-jpa&quot; aria-label=&quot;chapter 2 maria 데이터베이스와 spring data jpa permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chapter 2 Maria 데이터베이스와 Spring Data JPA&lt;/h1&gt;
&lt;h2 id=&quot;maira-db&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#maira-db&quot; aria-label=&quot;maira db permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Maira DB?&lt;/h2&gt;
&lt;p&gt;MySQL과 거의 유사하지만 완전한 오픈소스
&lt;a href=&quot;./../../../Database/MariaDB%20docker%EC%97%90%20%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.md&quot;&gt;MariaDB docker에 설치하기&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;db를-위한-스프링-부트-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#db%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;db를 위한 스프링 부트 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DB를 위한 스프링 부트 설정&lt;/h2&gt;
&lt;p&gt;스프링 부트에서는 &lt;code class=&quot;language-text&quot;&gt;Auto Configure&lt;/code&gt;이라는 자동 설정 기능이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특정한 라이브러리가 있다면 이에 관련된 설정을 자동으로 추가&lt;/li&gt;
&lt;li&gt;Spring Data JPA가 의존성으로 추가되었기 때문에, 이에 대한 설정이 자동으로 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;구체적인 값은 직접 지정해줘야 한다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;build.gradle&lt;/code&gt;에 mariadb 관련 구문을 추가하자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client/2.7.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;maven 저장소&lt;/a&gt;에서 최신 버전을 알아볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;compile group: &amp;#39;org.mariadb.jdbc&amp;#39;, name: &amp;#39;mariadb-java-client&amp;#39;, version: &amp;#39;2.7.1&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;추가적인 데이터베이스 설정을 추가합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;application.properties&lt;/code&gt;을 이용하거나 별도의 클래스 파일을 작성해 사용가능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;# 데이터베이스 설정을 위한 부분, Driver, Databse 주소, user, password 등록
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/test_db
spring.datasource.username=username               #username
spring.datasource.password=password               #password&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;spring-data-jpa-소개&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-data-jpa-%EC%86%8C%EA%B0%9C&quot; aria-label=&quot;spring data jpa 소개 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spring Data JPA 소개&lt;/h2&gt;
&lt;p&gt;JPA는 JAVA언어를 통해서 데이터베이스와 같은 영속 계층을 처리하고자 하는 스펙&lt;/p&gt;
&lt;h3 id=&quot;orm과-jpa&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#orm%EA%B3%BC-jpa&quot; aria-label=&quot;orm과 jpa permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ORM과 JPA&lt;/h3&gt;
&lt;p&gt;ORM(Object Relational Mapping)은 객체지향과 관련&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;객체지향 패러다임을 관계형 패러다임으로 매핑해주는 개념&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;객체지향의 구조가 관계형 데이터베이스와 유사하다는 점에서 시장&lt;br&gt;
RDB에서는 테이블을 설계할 때 칼럼을 정의하고 칼럼에 맞는 데이터 타입을 지정해 데이터를 보관하는 틀을 만든다는 의미에서 클래스와 유사하다.  &lt;/p&gt;
&lt;p&gt;객체지향과 관계형 데이터베이스는 유사한 특징을 가지고 있는데, 이런 특정에 기초해서&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;객체지향을 자동으로 관계형 데이터베이스에 맞게 처리 해주는 기법이 ORM이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JPA는 Java Persistence API의 약어로 ORM을 Java 언어에 맞게 사용하는 스펙이다.
ORM이 JPA의 더 상위 개념이며, JPA를 구현한 프레임워크 중 Spring에서는 Hibernate를 기본적으로 사용한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/77606318/105649385-63d68880-5ef3-11eb-8078-e45b7b7a2996.png&quot; alt=&quot;image&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/77606318/105649421-8f597300-5ef3-11eb-8e75-0254a8ebdc31.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;entity-class와-jparepository&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#entity-class%EC%99%80-jparepository&quot; aria-label=&quot;entity class와 jparepository permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Entity Class와 JpaRepository&lt;/h2&gt;
&lt;p&gt;Spring Data JPA가 개발에 필요한 것은 단지 두 종류의 코드로 구현 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JPA를 통해서 관리하게 되는 객체(Entity Object)를 위한 엔티티 클래스&lt;/li&gt;
&lt;li&gt;엔티티 객체들을 처리하는 기능을 가진 Repository&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 중 Repository는 Spring Data JPA에서 제공하는 인터페이스로 설계&lt;/p&gt;
&lt;h2 id=&quot;spring-boot-jpa-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-boot-jpa-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;spring boot jpa 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spring Boot JPA 설정&lt;/h2&gt;
&lt;p&gt;JPA 이용 시 생기는 여러가지 상황을 설정으로 적용&lt;/p&gt;
&lt;p&gt;spring.jpa.hibernate.ddl-auto&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 실행 시 DDL을 생성할 것인지 정하는 설정&lt;/li&gt;
&lt;li&gt;설정값은 create, update, create-drop, validate등등&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;spring.jpa.properties.hibernate.format_sql=true&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실제 jpa 구현체인 hiberante가 동작하며 발생하는 sql을 포맷팅 하여 출력&lt;/li&gt;
&lt;li&gt;true, false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;spring.jpa.show-sql&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jpa 처리 시에 발생하는 sql을 보여줄 것인지 결정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;jparepository-인터페이스-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jparepository-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;jparepository 인터페이스 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JpaRepository 인터페이스 구조&lt;/h2&gt;
&lt;p&gt;여러 종류의 인터페이스 기능을 통해 JPA 관련 작업을 별도의 코드 없이 처리할 수 있게 지원&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/77606318/105662393-f2a6cd80-5f12-11eb-937d-5580a0e1fdf2.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;일반적인 기능만을 사용할 때는 &lt;code class=&quot;language-text&quot;&gt;CrudRepository&lt;/code&gt; 를 사용&lt;br&gt;
모든 JPA관련 기능을 사용하고 싶을 때는 &lt;code class=&quot;language-text&quot;&gt;JpaRepository&lt;/code&gt; 사용&lt;/p&gt;
&lt;p&gt;실제로 Repository를 사용하기 위해서는 위 인터페이스를 상속하는 것으로 모든게 해결&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interface만 등록하면 (&lt;code class=&quot;language-text&quot;&gt;MemoRepostiroy&lt;/code&gt;를 등록하면) 스프링에서 자동적으로 빈(bean)으로 등록&lt;/li&gt;
&lt;li&gt;내부적으로 인터페이스 타입에 맞는 객체를 생성해 빈으로 등록&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기본적인 인터페이스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;insert&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;save(Entity Object)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;select&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;findById(Key Type), getOne(Key Type)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;save(Entity Object)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delete&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;deleteById(Key type), delete(Entity Object)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;insert-update-모두-save&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#insert-update-%EB%AA%A8%EB%91%90-save&quot; aria-label=&quot;insert update 모두 save permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;insert, update 모두 save()?&lt;/h3&gt;
&lt;p&gt;JPA 구현체가 메모리상에서 객체를 비교하고 (select 구문 1번), 없다면 insert 존재한다면 update를 동작시키는 방식으로 동작하기 때문&lt;/p&gt;
&lt;h3 id=&quot;findbyid-getone-동작방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#findbyid-getone-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;findbyid getone 동작방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;findById(), getOne() 동작방식&lt;/h3&gt;
&lt;p&gt;데이터베이스를 먼저 이용하는지, 나중에 필요한 순간까지 미루는지에 대한 차이  &lt;/p&gt;
&lt;p&gt;findById()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java.util 패키지의 &lt;code class=&quot;language-text&quot;&gt;Optional&lt;/code&gt; 타입으로 반환되기 때문에 한번 더 결과가 존재하는지 체크하는 형태로 작성&lt;/li&gt;
&lt;li&gt;실행 순간에 이미 SQL처리는 완료되었고, 결과에 대해서는 이후에 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;getOne()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt; 어노테이션이 추가로 필요&lt;/li&gt;
&lt;li&gt;반환 값은 해당 객체지만, 실제 객체가 필요한 순간까지 SQL을 실행하지 않고 보류&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;chapter-25-페이징--정렬-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter-25-%ED%8E%98%EC%9D%B4%EC%A7%95--%EC%A0%95%EB%A0%AC-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;chapter 25 페이징  정렬 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;chapter 2.5 페이징 / 정렬 처리&lt;/h2&gt;
&lt;p&gt;페이징 처리와 정렬을 위해 오라클은 inline view를, mysql은 limit을 알아야 한다.&lt;br&gt;
JPA는 내부적으로 이런 처리를 ‘Dialect’라는 존재를 이용해서 처리를 findAll()이라는 메서드를 사용  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JpaRepository 인터페이스의 상위인 PagingAndSorRepository의 메서드로 파라미터로 전달되는 Pageableㅣ라는 타입의 객체에 의해서 실행되는 쿼리를 결정&lt;/li&gt;
&lt;li&gt;Return type이 &lt;code class=&quot;language-text&quot;&gt;Page&amp;lt;T&amp;gt;&lt;/code&gt;라면 꼭 Pageable 파라미터로 이용해야 한다.
Pageable 인터페이스  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;org.springframework.data.domain.PageRequest&lt;/code&gt; 라는 클래스를 사용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;protected&lt;/code&gt;로 선언되어 &lt;code class=&quot;language-text&quot;&gt;new&lt;/code&gt;를 선언할 수 없다.&lt;/li&gt;
&lt;li&gt;객체를 생성하기 위해 static한 &lt;code class=&quot;language-text&quot;&gt;of()&lt;/code&gt;를 이용해 처리&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;PageRequest&lt;/code&gt;생성자에서 &lt;code class=&quot;language-text&quot;&gt;page, size, Sort&lt;/code&gt;라는 정보를 이용해 객체 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;static 메서드인 &lt;code class=&quot;language-text&quot;&gt;of()&lt;/code&gt;의 경우 형태가 여러개 존재, 이는 페이지 처리에 필요한 정렬 조건을 같이 지정하기 위해서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;of(int page, int size)&lt;/code&gt; : 0부터 시작하는 페이저 번호과 개수, 정렬이 지정되지 않음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;of(int page, int size, Sort.Direction direction, String ...props)&lt;/code&gt; : 0부터 시작하는 페이지 번호와 개수, 정렬의 방향과 정렬 기준 필드&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;of(int page, int size, Sort sort)&lt;/code&gt;: 페이지 번호와 개수, 정렬 관련 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;페이징-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%95-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;페이징 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이징 처리&lt;/h3&gt;
&lt;p&gt;항상 0부터 시작한다.&lt;br&gt;
findAll()의 반환값은 Page타입이라는점  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 목록만 가져오는데 그치지 않고, 실제 페이지 처리에 필요한 전체 데이터의 개수를 가져오는 쿼리 역시 같이 처리하기 때문  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Page&amp;#x3C;엔티티 타입&gt; 의 다양한 메서드 사용가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getTotalPages() : 총 페이지 수&lt;/li&gt;
&lt;li&gt;getTotalElementes() : 전체 개수&lt;/li&gt;
&lt;li&gt;getNumber() : 현재 페이지 번호 (0부터 시작)&lt;/li&gt;
&lt;li&gt;getSize() : 페이지당 데이터 개수&lt;/li&gt;
&lt;li&gt;hasNext() : 다음 페이지 존재 여부&lt;/li&gt;
&lt;li&gt;isFirst() : 시작 페이지(0) 여부&lt;/li&gt;
&lt;li&gt;getcontent() : List&amp;#x3C;엔티티&gt;으로 처리 가능&lt;/li&gt;
&lt;li&gt;get() : Stream&amp;#x3C;엔티티&gt;으로 처리 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;정렬-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EB%A0%AC-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;정렬 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정렬 처리&lt;/h3&gt;
&lt;p&gt;PageRequest에는 &lt;code class=&quot;language-text&quot;&gt;org.springframework.data.domain.Sort&lt;/code&gt; 타입을 파라미터로 전달 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한 개 혹은 여러 개의 필드값을 이용해 정렬 방향 등을 지정가능&lt;/li&gt;
&lt;li&gt;여러 개의 Sort 같은 경우 and, or등으로 연결 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;chapter-26-쿼리-메서드로&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chapter-26-%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C&quot; aria-label=&quot;chapter 26 쿼리 메서드로 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;chapter 2.6 쿼리 메서드로&lt;/h2&gt;
&lt;p&gt;마지막 기능은 쿼리 메서드와 &lt;code class=&quot;language-text&quot;&gt;JPQL(Java Persistence Query Language)&lt;/code&gt;&lt;br&gt;
다양한 검색조건이나 특정 범위 객체 검색의 경우&lt;br&gt;
Spring Data JPA의 경우 이러한 처리를 위해 방법 제공  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;쿼리 메서드 : 메서드의 이름 자체가 쿼리의 구문으로 처리되는 기능&lt;/li&gt;
&lt;li&gt;@Query : SQL과 유사하게 엔티티 클래스의 정보를 이용해서 쿼리를 작성하는 기능&lt;/li&gt;
&lt;li&gt;Querydsl 등의 동적 처리 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;쿼리-메서드란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%9E%80&quot; aria-label=&quot;쿼리 메서드란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;쿼리 메서드란&lt;/h3&gt;
&lt;p&gt;메서드의 이름 자체가 질의(query)문이 되는 흥미로운 기능&lt;br&gt;
findBy, getBy… 등으로 시작하고 자세한 종류는 &lt;code class=&quot;language-text&quot;&gt;Spring Data JPA Reference&lt;/code&gt;를 통해 알아볼 수 있다.&lt;br&gt;
필요한 필드 조건이나 &lt;code class=&quot;language-text&quot;&gt;And, Or&lt;/code&gt;등의 키워드를 통해서 질의 조건을 만들어 낸다.  &lt;/p&gt;
&lt;p&gt;다양한 장점들&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select를 하는 작업이라면 List 타입이나 배열을 이용 할 수 있다.&lt;/li&gt;
&lt;li&gt;파라미터에 Pageable 타입을 넣는 경우, 무조건 &lt;code class=&quot;language-text&quot;&gt;Page&amp;lt;Entity&amp;gt;&lt;/code&gt; 타입&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;query-어노테이션&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#query-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98&quot; aria-label=&quot;query 어노테이션 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;@Query 어노테이션&lt;/h3&gt;
&lt;p&gt;간단한 처리만 쿼리 메서드를 이용, @Query를 더 많이 사용&lt;br&gt;
메서드의 이름과 상관없이 메서드에 추가한 어노테이션을 통해 원하는 처리 가능&lt;br&gt;
JPQL이라고 부르는 객체지향 쿼리 구문 사용&lt;br&gt;
다음과 같은 작업 진행  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;필요한 데이터만 선별적으로 추출&lt;/li&gt;
&lt;li&gt;데이터베이스에 맞는 순수한 SQL(Native SQL)을 사용하는 기능&lt;/li&gt;
&lt;li&gt;insert, update, delete 등 DML을 처리하는 기능 (@Modifying과 함께 사용)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;객체지향 쿼리는 테이블 대신 엔티티 클래스 이용&lt;br&gt;
테이블의 칼럼 대신에 클래스에 선언된 필드를 이용해 작성  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;@ &lt;span class=&quot;token class-name&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;select m from Memo m order by m.mno desc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Memo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getListDesc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파라미터 바인딩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;?1, ?2 와 1부터 시작하는 파라미터의 순서를 이용하는 방식&lt;/li&gt;
&lt;li&gt;:xxx 와 같이 파라미터 이름을 활용하는 방식&lt;/li&gt;
&lt;li&gt;:#{} 와 같이 자바 빈 스타일을 이용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@Param&lt;/code&gt; 어노테이션을 통해서 파라미터를 적는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Modifying&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;update Memo m set m.memoText = :memoText where m.mno = :mno&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateMemoText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mno&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; mno&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@Parama&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memoText&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; memoText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;update Memo m set m.memoText = :#{#param.memoText} where m.mno = :#{#param.mno}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateMemoText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mno&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; mno&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@Parama&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memoText&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; memoText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;페이징 처리를 위해서 Pageable 파라미터를 적용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Queru&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;select m from Memo m where m.mno &gt; :mno&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; countQuery &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;select count(m) from Memo m where m.mon &gt; :mno&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Memo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getListWithQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; mno&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pageable&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pageable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;@Query의 장점 중 하나는 쿼리 메서드의 경우 엔티티 타입의 데이터만을 추출하지만 @Query를 사용하면 &lt;code class=&quot;language-text&quot;&gt;Object[]&lt;/code&gt;의 형태로 선별적으로 추출&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;select m.mno, m.memoText, CURRENT_DATE from Memo m where m.mno &gt; :mno&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
        countQuery &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;select count(m) from Memo m where m.mno &gt; :mno&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getListWithQueryObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; mno&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pageable&lt;/span&gt; pageable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;ß&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Native SQL 처리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 베이스 고유의 SQL을 그대로 사용 가능ß&lt;/li&gt;
&lt;li&gt;@Query의 nativeQuery속성을 true로 설정하면 기존의 SQL그대로 사용가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Template]]></title><description><![CDATA[Quisque cursus, metus vitae pharetra auctor, sem massa mattis sem, at interdum magna augue eget diam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Morbi lacinia molestie dui. Praesent blandit dolor. Sed non quam. In vel mi sit amet augue congue elementum.]]></description><link>https://hyun-cho.github.io/posts/Template</link><guid isPermaLink="false">https://hyun-cho.github.io/posts/Template</guid><pubDate>Fri, 01 Jan 2021 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;Template&lt;/p&gt;</content:encoded></item></channel></rss>